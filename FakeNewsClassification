{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":6641062,"sourceType":"datasetVersion","datasetId":2093157}],"dockerImageVersionId":30775,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"%%capture\n!python3 -m venv venv\n!source venv/bin/activate\n!pip install tensorflow transformers\n\n!pip install imbalanced-learn","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-21T03:14:43.026166Z","iopub.execute_input":"2024-10-21T03:14:43.026581Z","iopub.status.idle":"2024-10-21T03:15:14.760066Z","shell.execute_reply.started":"2024-10-21T03:14:43.026540Z","shell.execute_reply":"2024-10-21T03:15:14.758778Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport tensorflow as tf\nfrom transformers import TFDistilBertModel, DistilBertTokenizer, TFDistilBertForSequenceClassification\nimport pickle\n\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.utils.class_weight import compute_class_weight\nimport numpy as np\n\nfrom tensorflow.keras.layers import Dropout, Input, Dense, Lambda\nfrom tensorflow.keras.models import Model\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-21T03:15:14.762403Z","iopub.execute_input":"2024-10-21T03:15:14.762779Z","iopub.status.idle":"2024-10-21T03:15:35.651359Z","shell.execute_reply.started":"2024-10-21T03:15:14.762739Z","shell.execute_reply":"2024-10-21T03:15:35.650485Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/fake-news-classification/WELFake_Dataset.csv\")\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-21T03:15:35.652712Z","iopub.execute_input":"2024-10-21T03:15:35.653770Z","iopub.status.idle":"2024-10-21T03:15:41.440938Z","shell.execute_reply.started":"2024-10-21T03:15:35.653730Z","shell.execute_reply":"2024-10-21T03:15:41.439837Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0                                              title  \\\n0           0  LAW ENFORCEMENT ON HIGH ALERT Following Threat...   \n1           1                                                NaN   \n2           2  UNBELIEVABLE! OBAMA’S ATTORNEY GENERAL SAYS MO...   \n3           3  Bobby Jindal, raised Hindu, uses story of Chri...   \n4           4  SATAN 2: Russia unvelis an image of its terrif...   \n\n                                                text  label  \n0  No comment is expected from Barack Obama Membe...      1  \n1     Did they post their votes for Hillary already?      1  \n2   Now, most of the demonstrators gathered last ...      1  \n3  A dozen politically active pastors came here f...      0  \n4  The RS-28 Sarmat missile, dubbed Satan 2, will...      1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>title</th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>LAW ENFORCEMENT ON HIGH ALERT Following Threat...</td>\n      <td>No comment is expected from Barack Obama Membe...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>NaN</td>\n      <td>Did they post their votes for Hillary already?</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>UNBELIEVABLE! OBAMA’S ATTORNEY GENERAL SAYS MO...</td>\n      <td>Now, most of the demonstrators gathered last ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>Bobby Jindal, raised Hindu, uses story of Chri...</td>\n      <td>A dozen politically active pastors came here f...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>SATAN 2: Russia unvelis an image of its terrif...</td>\n      <td>The RS-28 Sarmat missile, dubbed Satan 2, will...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df['label'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-10-21T03:15:41.443344Z","iopub.execute_input":"2024-10-21T03:15:41.443768Z","iopub.status.idle":"2024-10-21T03:15:41.457822Z","shell.execute_reply.started":"2024-10-21T03:15:41.443718Z","shell.execute_reply":"2024-10-21T03:15:41.456752Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"label\n1    37106\n0    35028\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"x = list(df['text'])\ny = list(df['label'])","metadata":{"execution":{"iopub.status.busy":"2024-10-21T03:15:41.459084Z","iopub.execute_input":"2024-10-21T03:15:41.459993Z","iopub.status.idle":"2024-10-21T03:15:41.486007Z","shell.execute_reply.started":"2024-10-21T03:15:41.459954Z","shell.execute_reply":"2024-10-21T03:15:41.485193Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"MODEL_NAME = 'distilbert-base-uncased'\nMAX_LEN = 100\n\nreview = x[0]\n\n# Initialize tokenizer\ntokenizer = DistilBertTokenizer.from_pretrained(MODEL_NAME)\n\ninputs = tokenizer(review, max_length=MAX_LEN, truncation=True, padding=True)\n\nprint(f'review: \\'{review}\\'')\nprint(f'input ids: {inputs[\"input_ids\"]}')\nprint(f'attention mask: {inputs[\"attention_mask\"]}')","metadata":{"execution":{"iopub.status.busy":"2024-10-21T03:15:41.487221Z","iopub.execute_input":"2024-10-21T03:15:41.487613Z","iopub.status.idle":"2024-10-21T03:15:42.426624Z","shell.execute_reply.started":"2024-10-21T03:15:41.487537Z","shell.execute_reply":"2024-10-21T03:15:42.425755Z"},"trusted":true},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ddc1199dee9d48d4be8d3de7e58985e9"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"131ade6a6d3f48e9bac23ed795f87527"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1cc3c6779e6b46d89133cc2127b38000"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/483 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"eca7ae4cd0a0474bb0756bf1a12bd6b1"}},"metadata":{}},{"name":"stdout","text":"review: 'No comment is expected from Barack Obama Members of the #FYF911 or #FukYoFlag and #BlackLivesMatter movements called for the lynching and hanging of white people and cops. They encouraged others on a radio show Tuesday night to  turn the tide  and kill white people and cops to send a message about the killing of black people in America.One of the F***YoFlag organizers is called  Sunshine.  She has a radio blog show hosted from Texas called,  Sunshine s F***ing Opinion Radio Show. A snapshot of her #FYF911 @LOLatWhiteFear Twitter page at 9:53 p.m. shows that she was urging supporters to  Call now!! #fyf911 tonight we continue to dismantle the illusion of white Below is a SNAPSHOT Twitter Radio Call Invite   #FYF911The radio show aired at 10:00 p.m. eastern standard time.During the show, callers clearly call for  lynching  and  killing  of white people.A 2:39 minute clip from the radio show can be heard here. It was provided to Breitbart Texas by someone who would like to be referred to as  Hannibal.  He has already received death threats as a result of interrupting #FYF911 conference calls.An unidentified black man said  when those mother f**kers are by themselves, that s when when we should start f***ing them up. Like they do us, when a bunch of them ni**ers takin  one of us out, that s how we should roll up.  He said,  Cause we already roll up in gangs anyway. There should be six or seven black mother f**ckers, see that white person, and then lynch their ass. Let s turn the tables. They conspired that if  cops started losing people,  then  there will be a state of emergency. He speculated that one of two things would happen,  a big-ass [R s?????] war,  or  ni**ers, they are going to start backin  up. We are already getting killed out here so what the f**k we got to lose? Sunshine could be heard saying,  Yep, that s true. That s so f**king true. He said,  We need to turn the tables on them. Our kids are getting shot out here. Somebody needs to become a sacrifice on their side.He said,  Everybody ain t down for that s**t, or whatever, but like I say, everybody has a different position of war.  He continued,  Because they don t give a f**k anyway.  He said again,  We might as well utilized them for that s**t and turn the tables on these n**ers. He said, that way  we can start lookin  like we ain t havin  that many casualties, and there can be more causalities on their side instead of ours. They are out their killing black people, black lives don t matter, that s what those mother f**kers   so we got to make it matter to them. Find a mother f**ker that is alone. Snap his ass, and then f***in hang him from a damn tree. Take a picture of it and then send it to the mother f**kers. We  just need one example,  and  then people will start watchin .  This will turn the tables on s**t, he said. He said this will start  a trickle-down effect.  He said that when one white person is hung and then they are just  flat-hanging,  that will start the  trickle-down effect.  He continued,  Black people are good at starting trends. He said that was how  to get the upper-hand. Another black man spoke up saying they needed to kill  cops that are killing us. The first black male said,  That will be the best method right there. Breitbart Texas previously reported how Sunshine was upset when  racist white people  infiltrated and disrupted one of her conference calls. She subsequently released the phone number of one of the infiltrators. The veteran immediately started receiving threatening calls.One of the #F***YoFlag movement supporters allegedly told a veteran who infiltrated their publicly posted conference call,  We are going to rape and gut your pregnant wife, and your f***ing piece of sh*t unborn creature will be hung from a tree. Breitbart Texas previously encountered Sunshine at a Sandra Bland protest at the Waller County Jail in Texas, where she said all white people should be killed. She told journalists and photographers,  You see this nappy-ass hair on my head?   That means I am one of those more militant Negroes.  She said she was at the protest because  these redneck mother-f**kers murdered Sandra Bland because she had nappy hair like me. #FYF911 black radicals say they will be holding the  imperial powers  that are actually responsible for the terrorist attacks on September 11th accountable on that day, as reported by Breitbart Texas. There are several websites and Twitter handles for the movement. Palmetto Star  describes himself as one of the head organizers. He said in a YouTube video that supporters will be burning their symbols of  the illusion of their superiority,  their  false white supremacy,  like the American flag, the British flag, police uniforms, and Ku Klux Klan hoods.Sierra McGrone or  Nocturnus Libertus  posted,  you too can help a young Afrikan clean their a** with the rag of oppression.  She posted two photos, one that appears to be herself, and a photo of a black man, wiping their naked butts with the American flag.For entire story: Breitbart News'\ninput ids: [101, 2053, 7615, 2003, 3517, 2013, 13857, 8112, 2372, 1997, 1996, 1001, 1042, 2100, 2546, 2683, 14526, 2030, 1001, 11865, 4801, 11253, 17802, 1998, 1001, 2304, 3669, 6961, 18900, 3334, 5750, 2170, 2005, 1996, 11404, 2075, 1998, 5689, 1997, 2317, 2111, 1998, 10558, 1012, 2027, 6628, 2500, 2006, 1037, 2557, 2265, 9857, 2305, 2000, 2735, 1996, 10401, 1998, 3102, 2317, 2111, 1998, 10558, 2000, 4604, 1037, 4471, 2055, 1996, 4288, 1997, 2304, 2111, 1999, 2637, 1012, 2028, 1997, 1996, 1042, 1008, 1008, 1008, 10930, 10258, 8490, 18829, 2003, 2170, 9609, 1012, 2016, 2038, 1037, 2557, 9927, 2265, 4354, 2013, 102]\nattention mask: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Define Model","metadata":{}},{"cell_type":"code","source":"# Define helper functions for encoding and constructing the dataset\ndef construct_encodings(x, tokenizer, max_len, trucation=True, padding=True):\n    return tokenizer(x, max_length=max_len, truncation=trucation, padding=padding)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T03:15:42.427895Z","iopub.execute_input":"2024-10-21T03:15:42.428198Z","iopub.status.idle":"2024-10-21T03:15:42.433516Z","shell.execute_reply.started":"2024-10-21T03:15:42.428166Z","shell.execute_reply":"2024-10-21T03:15:42.432588Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"x = [str(item) for item in x]","metadata":{"execution":{"iopub.status.busy":"2024-10-21T03:15:42.434842Z","iopub.execute_input":"2024-10-21T03:15:42.435449Z","iopub.status.idle":"2024-10-21T03:15:42.458738Z","shell.execute_reply.started":"2024-10-21T03:15:42.435405Z","shell.execute_reply":"2024-10-21T03:15:42.457850Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"from imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\n\nencodings = construct_encodings(x, tokenizer, max_len=MAX_LEN)\n#below: SMOTE\nTEST_SPLIT = 0.3  # Define the test split ratio\nBATCH_SIZE = 16\n\ninput_ids = encodings['input_ids']\nattention_masks = encodings['attention_mask']\n\n# Split the data into training and testing sets\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test, masks_train, masks_test = train_test_split(\n    input_ids, y, attention_masks, test_size=TEST_SPLIT, random_state=42, stratify=y\n)\n\n# Apply SMOTE to the training data only\nsmote = SMOTE(random_state=42)\nx_train_resampled, y_train_resampled = smote.fit_resample(x_train, y_train)\n\n# Adjust attention masks for the new samples generated by SMOTE\n# Note: SMOTE only generates synthetic samples based on input features. We'll copy masks for simplicity.\nmasks_train_resampled = np.repeat(masks_train, np.ceil(len(x_train_resampled) / len(masks_train)).astype(int), axis=0)[:len(x_train_resampled)]\n\n# Reconstruct the encodings with resampled data\ntrain_encodings = {'input_ids': x_train_resampled, 'attention_mask': masks_train_resampled}\ntest_encodings = {'input_ids': x_test, 'attention_mask': masks_test}\n","metadata":{"execution":{"iopub.status.busy":"2024-10-21T03:55:17.971588Z","iopub.execute_input":"2024-10-21T03:55:17.972301Z","iopub.status.idle":"2024-10-21T04:20:51.808650Z","shell.execute_reply.started":"2024-10-21T03:55:17.972258Z","shell.execute_reply":"2024-10-21T04:20:51.807559Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":"**Changes:** I used SMOTE to create a more balanced training dataset.","metadata":{}},{"cell_type":"code","source":"def construct_tfdataset(encodings, y=None):\n#     if y:\n#         return tf.data.Dataset.from_tensor_slices((dict(encodings),y))\n#     else:\n#         # this case is used when making predictions on unseen samples after training\n#         return tf.data.Dataset.from_tensor_slices(dict(encodings))\n    if y is not None:\n        return tf.data.Dataset.from_tensor_slices((dict(encodings), y))\n    else:\n        return tf.data.Dataset.from_tensor_slices(dict(encodings))","metadata":{"execution":{"iopub.status.busy":"2024-10-21T04:21:41.433918Z","iopub.execute_input":"2024-10-21T04:21:41.434333Z","iopub.status.idle":"2024-10-21T04:21:41.440289Z","shell.execute_reply.started":"2024-10-21T04:21:41.434296Z","shell.execute_reply":"2024-10-21T04:21:41.439380Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":"**Changes:** I updated construct_tfdataset function.(SMOTE)\n\n","metadata":{}},{"cell_type":"code","source":"# Create TensorFlow datasets\n# tfdataset = construct_tfdataset(encodings,y) SMOTE\n\ntfdataset_train = construct_tfdataset(train_encodings, y_train_resampled).batch(BATCH_SIZE)\ntfdataset_test = construct_tfdataset(test_encodings, y_test).batch(BATCH_SIZE)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T04:21:41.442472Z","iopub.execute_input":"2024-10-21T04:21:41.442925Z","iopub.status.idle":"2024-10-21T04:22:11.017330Z","shell.execute_reply.started":"2024-10-21T04:21:41.442868Z","shell.execute_reply":"2024-10-21T04:22:11.016503Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":"# Train and evaluate","metadata":{}},{"cell_type":"code","source":"# TEST_SPLIT = 0.3\n# BATCH_SIZE = 16 \n\n# train_size = int(len(x) * (1-TEST_SPLIT))\n\n# tfdataset = tfdataset.shuffle(len(x))\n# tfdataset_train = tfdataset.take(train_size)\n# tfdataset_test = tfdataset.skip(train_size)\n\n# tfdataset_train = tfdataset_train.batch(BATCH_SIZE)\n# tfdataset_test = tfdataset_test.batch(BATCH_SIZE)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T04:22:11.018537Z","iopub.execute_input":"2024-10-21T04:22:11.018878Z","iopub.status.idle":"2024-10-21T04:22:11.023192Z","shell.execute_reply.started":"2024-10-21T04:22:11.018844Z","shell.execute_reply":"2024-10-21T04:22:11.022160Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":"**Changes:** I changed nepochs from 5 to 16.\n\n* Increased batch size for better GPU utilization SMOTE","metadata":{}},{"cell_type":"code","source":"# Define model parameters\nN_EPOCHS = 3\nDROPOUT_RATE = 0.3\n\n# Load the pre-trained DistilBERT base model (without classification head)\nbase_model = TFDistilBertModel.from_pretrained(MODEL_NAME)\n\n# Define input layers\ninput_ids = Input(shape=(MAX_LEN,), dtype=tf.int32, name=\"input_ids\")\nattention_mask = Input(shape=(MAX_LEN,), dtype=tf.int32, name=\"attention_mask\")\n\n# Wrap the base model call in a Lambda layer to ensure compatibility\ndistilbert_output = Lambda(\n    lambda x: base_model(x[0], attention_mask=x[1])[0],  # Extract the last hidden state directly\n    output_shape=(MAX_LEN, base_model.config.hidden_size)\n)([input_ids, attention_mask])\n\n# Extract the [CLS] token's hidden state\nhidden_state = distilbert_output[:, 0, :]  # Extract the first token ([CLS]) representation\n\n# Apply dropout with a higher rate (e.g., 0.3 or 0.5)\ndropout = Dropout(DROPOUT_RATE)(hidden_state)\n\n# Output layer for classification (binary classification, so one Dense layer with 2 units)\noutput = Dense(2, activation='softmax')(dropout)\n\n# Create the new model\nmodel = Model(inputs=[input_ids, attention_mask], outputs=output)\noptimizer = tf.keras.optimizers.Adam(learning_rate=1e-5, clipnorm=1.0)\n# Compile model with the optimizer\nmodel.compile(optimizer=optimizer, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])\n\n# 5. Print model summary to see the updated architecture\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-10-21T04:22:11.024343Z","iopub.execute_input":"2024-10-21T04:22:11.024661Z","iopub.status.idle":"2024-10-21T04:22:13.440315Z","shell.execute_reply.started":"2024-10-21T04:22:11.024619Z","shell.execute_reply":"2024-10-21T04:22:13.439401Z"},"trusted":true},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/268M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"afbecd58c25a4e87a658455c342ea84f"}},"metadata":{}},{"name":"stderr","text":"Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFDistilBertModel: ['vocab_transform.weight', 'vocab_projector.bias', 'vocab_layer_norm.bias', 'vocab_layer_norm.weight', 'vocab_transform.bias']\n- This IS expected if you are initializing TFDistilBertModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n- This IS NOT expected if you are initializing TFDistilBertModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\nAll the weights of TFDistilBertModel were initialized from the PyTorch model.\nIf your task is similar to the task the model of the checkpoint was trained on, you can already use TFDistilBertModel for predictions without further training.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ input_ids           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ attention_mask      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ lambda (\u001b[38;5;33mLambda\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m768\u001b[0m)  │          \u001b[38;5;34m0\u001b[0m │ input_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ attention_mask[\u001b[38;5;34m0\u001b[0m… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item (\u001b[38;5;33mGetItem\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m768\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ lambda[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]      │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m768\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ get_item[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │      \u001b[38;5;34m1,538\u001b[0m │ dropout[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ input_ids           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ attention_mask      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ lambda (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Lambda</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ input_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ attention_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ lambda[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]      │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ get_item[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │      <span style=\"color: #00af00; text-decoration-color: #00af00\">1,538</span> │ dropout[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,538\u001b[0m (6.01 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,538</span> (6.01 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,538\u001b[0m (6.01 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,538</span> (6.01 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"markdown","source":"**Changes:** I added Gradient Clipping(clipnorm=1.0) and increased dropout rate to resolve overfitting\n\n* Gradient clipping ensures that updates to model weights don’t become too large, maintaining stability during training.\n* Track F1-score and precision/recall to ensure balanced performance. The classification report shows data imbalance so added this to monitor.\n* I added a Dropout layer with a rate of 0.3 after the DistilBERT output. This change aims to reduce overfitting by randomly deactivating 30% of neurons during training, which can help the model generalize better to new data.","metadata":{}},{"cell_type":"code","source":"# Calculate class weights\nclass_weights = compute_class_weight(\n    class_weight='balanced',\n    classes=np.unique(y),\n    y=y\n)\nclass_weights_dict = dict(enumerate(class_weights))\nprint(\"Class Weights:\", class_weights_dict)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T04:22:13.443922Z","iopub.execute_input":"2024-10-21T04:22:13.444732Z","iopub.status.idle":"2024-10-21T04:22:13.468769Z","shell.execute_reply.started":"2024-10-21T04:22:13.444676Z","shell.execute_reply":"2024-10-21T04:22:13.467841Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Class Weights: {0: 1.029661984697956, 1: 0.971999137605778}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Changes:** I added class weights to address data imbalance.\n\n* Class weights help to give more importance to the minority class during training, which balances out the learning process.\n* This method is suitable because it integrates well with the model.fit() method of Keras without needing to change the structure of the dataset.","metadata":{}},{"cell_type":"code","source":"# # Define callbacks\n# # Train the model with early stopping\n# early_stopping = EarlyStopping(\n#     monitor='val_loss',  # Monitor the validation loss\n#     patience=3,  # Stop training if val_loss does not improve for 3 epochs\n#     restore_best_weights=True  # Restore model weights from the best epoch\n# )\n\n# # Ensure the directory exists for saving the model\n# os.makedirs('./model', exist_ok=True)\n\n# checkpoint = ModelCheckpoint(\n#     filepath='./model/best_model.weights.h5',  # Save the best model weights to this file\n#     monitor='val_loss',  # Monitor validation loss to determine the best model\n#     save_best_only=True,  # Only save the model if the validation loss improves\n#     save_weights_only=True,  # Only save the weights\n#     verbose=1  # Print messages when saving the model\n# )","metadata":{"execution":{"iopub.status.busy":"2024-10-21T04:22:13.469778Z","iopub.execute_input":"2024-10-21T04:22:13.470116Z","iopub.status.idle":"2024-10-21T04:22:13.474716Z","shell.execute_reply.started":"2024-10-21T04:22:13.470023Z","shell.execute_reply":"2024-10-21T04:22:13.473812Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"# Train the model with the callbacks\nhistory = model.fit(\n    tfdataset_train,\n    validation_data=tfdataset_test,  # Provide validation data to monitor val_loss\n    epochs=N_EPOCHS,\n    validation_freq=1,\n    class_weight=class_weights_dict,\n)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T04:22:13.476081Z","iopub.execute_input":"2024-10-21T04:22:13.476509Z","iopub.status.idle":"2024-10-21T04:32:51.002009Z","shell.execute_reply.started":"2024-10-21T04:22:13.476464Z","shell.execute_reply":"2024-10-21T04:32:51.001051Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"Epoch 1/3\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/backend/tensorflow/nn.py:602: UserWarning: \"`sparse_categorical_crossentropy` received `from_logits=True`, but the `output` argument was produced by a Softmax activation and thus does not represent logits. Was this intended?\n  output, from_logits = _get_logits(\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1729484540.411677     175 service.cc:145] XLA service 0x7bc48c01d080 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1729484540.411737     175 service.cc:153]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\nI0000 00:00:1729484540.411741     175 service.cc:153]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\nW0000 00:00:1729484540.832328     175 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1729484544.068996     207 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'triton_gemm_dot_1', 8 bytes spill stores, 8 bytes spill loads\n\nI0000 00:00:1729484549.437888     209 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'triton_gemm_dot_1', 1256 bytes spill stores, 1212 bytes spill loads\n\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m   5/3247\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m2:02\u001b[0m 38ms/step - accuracy: 0.5969 - loss: 1.1128  ","output_type":"stream"},{"name":"stderr","text":"I0000 00:00:1729484551.496111     175 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m3245/3247\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.5585 - loss: 0.8325","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1729484686.901145     176 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\nI0000 00:00:1729484694.056245     230 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'triton_gemm_dot_1', 1256 bytes spill stores, 1212 bytes spill loads\n\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m3247/3247\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 44ms/step - accuracy: 0.5585 - loss: 0.8324","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1729484697.532777     175 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\nW0000 00:00:1729484758.497204     175 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\nI0000 00:00:1729484764.365913     256 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'triton_gemm_dot_1', 1256 bytes spill stores, 1212 bytes spill loads\n\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m3247/3247\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m232s\u001b[0m 66ms/step - accuracy: 0.5585 - loss: 0.8324 - val_accuracy: 0.7426 - val_loss: 0.5544\nEpoch 2/3\n\u001b[1m3247/3247\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m203s\u001b[0m 63ms/step - accuracy: 0.7305 - loss: 0.5494 - val_accuracy: 0.7898 - val_loss: 0.4798\nEpoch 3/3\n\u001b[1m3247/3247\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m202s\u001b[0m 62ms/step - accuracy: 0.7858 - loss: 0.4797 - val_accuracy: 0.8047 - val_loss: 0.4404\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# **Changes:** I added validation_freq=1\n* By default, model.fit() validates at the end of each epoch, but you can adjust this to validate more frequently to keep a closer eye on validation performance.\n","metadata":{}},{"cell_type":"code","source":"benchmarks = model.evaluate(tfdataset_test, return_dict=True, batch_size=BATCH_SIZE)\nprint(benchmarks)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T04:32:51.003280Z","iopub.execute_input":"2024-10-21T04:32:51.003625Z","iopub.status.idle":"2024-10-21T04:33:50.209173Z","shell.execute_reply.started":"2024-10-21T04:32:51.003586Z","shell.execute_reply":"2024-10-21T04:33:50.208256Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"\u001b[1m1353/1353\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m59s\u001b[0m 44ms/step - accuracy: 0.8031 - loss: 0.4431\n{'accuracy': 0.8047224879264832, 'loss': 0.44036173820495605}\n","output_type":"stream"}]},{"cell_type":"code","source":"def create_predictor(model, model_name, max_len):\n  tkzr = DistilBertTokenizer.from_pretrained(model_name)\n  def predict_proba(text):\n      x = [text]\n\n      encodings = construct_encodings(x, tkzr, max_len=max_len)\n      tfdataset = construct_tfdataset(encodings)\n      tfdataset = tfdataset.batch(1)\n\n      preds = model.predict(tfdataset).logits\n      preds = activations.softmax(tf.convert_to_tensor(preds)).numpy()\n      return preds[0][0]\n    \n  return predict_proba\n\nclf = create_predictor(model, MODEL_NAME, MAX_LEN)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T04:33:50.210463Z","iopub.execute_input":"2024-10-21T04:33:50.211144Z","iopub.status.idle":"2024-10-21T04:33:50.379233Z","shell.execute_reply.started":"2024-10-21T04:33:50.211108Z","shell.execute_reply":"2024-10-21T04:33:50.378265Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**The code below is what I added since the original code didn’t include any visualization. I referred to the second reference code (BERT model) since it had a lot of visualizations. I’ve added things like the confusion matrix and classification report.**","metadata":{}},{"cell_type":"code","source":"# 1. Plot Training/Validation Loss and Accuracy\ndef plot_metrics(history):\n    plt.figure(figsize=(12, 5))\n    # Plot accuracy\n    plt.subplot(1, 2, 1)\n    plt.plot(history.history['accuracy'], label='Train Accuracy')\n    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.title('Training and Validation Accuracy')\n    plt.legend()\n\n    # Plot loss\n    plt.subplot(1, 2, 2)\n    plt.plot(history.history['loss'], label='Train Loss')\n    plt.plot(history.history['val_loss'], label='Validation Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.title('Training and Validation Loss')\n    plt.legend()\n\n    plt.show()\n\nplot_metrics(history)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T04:33:50.380253Z","iopub.execute_input":"2024-10-21T04:33:50.380531Z","iopub.status.idle":"2024-10-21T04:33:50.918251Z","shell.execute_reply.started":"2024-10-21T04:33:50.380500Z","shell.execute_reply":"2024-10-21T04:33:50.917282Z"},"trusted":true},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# 2. Evaluate and Generate Predictions\ny_pred_probs = model.predict(tfdataset_test)\ny_pred = tf.argmax(y_pred_probs, axis=1).numpy()","metadata":{"execution":{"iopub.status.busy":"2024-10-21T04:33:50.919431Z","iopub.execute_input":"2024-10-21T04:33:50.919765Z","iopub.status.idle":"2024-10-21T04:34:55.821538Z","shell.execute_reply.started":"2024-10-21T04:33:50.919731Z","shell.execute_reply":"2024-10-21T04:34:55.820586Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stderr","text":"W0000 00:00:1729485231.882367     174 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m1352/1353\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 44ms/step","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1729485294.002268     176 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m1353/1353\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m64s\u001b[0m 46ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"# Get true labels\ny_true = []\nfor _, labels in tfdataset_test.unbatch():\n    y_true.append(labels.numpy())\ny_true = tf.convert_to_tensor(y_true).numpy()","metadata":{"execution":{"iopub.status.busy":"2024-10-21T04:34:55.822689Z","iopub.execute_input":"2024-10-21T04:34:55.823034Z","iopub.status.idle":"2024-10-21T04:35:01.711412Z","shell.execute_reply.started":"2024-10-21T04:34:55.822999Z","shell.execute_reply":"2024-10-21T04:35:01.710625Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"# 3. Print Classification Report\nprint(\"Classification Report:\")\nprint(classification_report(y_true, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-10-21T04:35:01.712583Z","iopub.execute_input":"2024-10-21T04:35:01.712897Z","iopub.status.idle":"2024-10-21T04:35:01.751259Z","shell.execute_reply.started":"2024-10-21T04:35:01.712864Z","shell.execute_reply":"2024-10-21T04:35:01.750327Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.78      0.84      0.81     10509\n           1       0.83      0.77      0.80     11132\n\n    accuracy                           0.80     21641\n   macro avg       0.81      0.81      0.80     21641\nweighted avg       0.81      0.80      0.80     21641\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# 4. Plot Confusion Matrix\nconf_matrix = confusion_matrix(y_true, y_pred)\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-21T04:35:01.755696Z","iopub.execute_input":"2024-10-21T04:35:01.756301Z","iopub.status.idle":"2024-10-21T04:35:02.045781Z","shell.execute_reply.started":"2024-10-21T04:35:01.756266Z","shell.execute_reply":"2024-10-21T04:35:02.044813Z"},"trusted":true},"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import os\n\n# Ensure the directory exists for saving the model\nos.makedirs('./model', exist_ok=True)\n# Save the Keras model with a proper extension.\nmodel.save('./model/clf.keras') # Use .keras or .h5 as the file extension.\n# Save additional information like model name and MAX_LEN using pickle.\nwith open('./model/info.pkl', 'wb') as f:\n    pickle.dump((MODEL_NAME, MAX_LEN), f)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T04:35:02.047087Z","iopub.execute_input":"2024-10-21T04:35:02.047402Z","iopub.status.idle":"2024-10-21T04:35:02.094877Z","shell.execute_reply.started":"2024-10-21T04:35:02.047368Z","shell.execute_reply":"2024-10-21T04:35:02.094065Z"},"trusted":true},"execution_count":26,"outputs":[]}]}