{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6641062,"sourceType":"datasetVersion","datasetId":2093157}],"dockerImageVersionId":30775,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-02T01:51:40.269157Z","iopub.execute_input":"2024-10-02T01:51:40.269650Z","iopub.status.idle":"2024-10-02T01:51:40.281497Z","shell.execute_reply.started":"2024-10-02T01:51:40.269602Z","shell.execute_reply":"2024-10-02T01:51:40.280148Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"/kaggle/input/fake-news-classification/WELFake_Dataset.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nimport keras\nimport gc\n\nfrom keras.models import Model, Sequential\nfrom keras.layers import Input, Dense, Dropout, Embedding\nfrom sklearn.model_selection import train_test_split \nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom keras.callbacks import EarlyStopping\nfrom tensorflow.keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.metrics import confusion_matrix, classification_report, f1_score\nfrom tensorflow.python.client import device_lib\nfrom transformers import AutoTokenizer, TFDistilBertModel  # Change: Import TFDistilBertModel\n\nSEED = 10","metadata":{"execution":{"iopub.status.busy":"2024-10-02T01:51:40.283725Z","iopub.execute_input":"2024-10-02T01:51:40.284119Z","iopub.status.idle":"2024-10-02T01:51:46.334869Z","shell.execute_reply.started":"2024-10-02T01:51:40.284080Z","shell.execute_reply":"2024-10-02T01:51:46.333718Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('../input/fake-news-classification/WELFake_Dataset.csv')\ndf.dropna(subset = ['text', 'title'], inplace = True)\ndf['text'] = df['title'] + ' ' + df['text']\n\nX = df['text']\ny = df['label']","metadata":{"execution":{"iopub.status.busy":"2024-10-02T01:51:46.336421Z","iopub.execute_input":"2024-10-02T01:51:46.336845Z","iopub.status.idle":"2024-10-02T01:51:53.868377Z","shell.execute_reply.started":"2024-10-02T01:51:46.336802Z","shell.execute_reply":"2024-10-02T01:51:53.867056Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":"# EDA","metadata":{}},{"cell_type":"code","source":"df['num_words'] = df['text'].apply(lambda x: len(x.split()))","metadata":{"execution":{"iopub.status.busy":"2024-10-02T01:51:53.871561Z","iopub.execute_input":"2024-10-02T01:51:53.872087Z","iopub.status.idle":"2024-10-02T01:51:56.687759Z","shell.execute_reply.started":"2024-10-02T01:51:53.872030Z","shell.execute_reply":"2024-10-02T01:51:56.686517Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(8, 5))\nsns.countplot(x=df['label'], palette='Set1', alpha=0.8)\nplt.title('Distribution of Fake - 0 /Real - 1 News')","metadata":{"execution":{"iopub.status.busy":"2024-10-02T01:51:56.689107Z","iopub.execute_input":"2024-10-02T01:51:56.689479Z","iopub.status.idle":"2024-10-02T01:51:57.052884Z","shell.execute_reply.started":"2024-10-02T01:51:56.689438Z","shell.execute_reply":"2024-10-02T01:51:57.051672Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Distribution of Fake - 0 /Real - 1 News')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x500 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(14, 5))\nsns.histplot(df['num_words'], bins=range(1, 3000, 50), palette='Set1', alpha=0.8)\nplt.title('Distribution of the News Words count')","metadata":{"execution":{"iopub.status.busy":"2024-10-02T01:51:57.054429Z","iopub.execute_input":"2024-10-02T01:51:57.054918Z","iopub.status.idle":"2024-10-02T01:51:57.653654Z","shell.execute_reply.started":"2024-10-02T01:51:57.054864Z","shell.execute_reply":"2024-10-02T01:51:57.652471Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/2106768673.py:2: UserWarning: Ignoring `palette` because no `hue` variable has been assigned.\n  sns.histplot(df['num_words'], bins=range(1, 3000, 50), palette='Set1', alpha=0.8)\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Distribution of the News Words count')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1400x500 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Define Model","metadata":{}},{"cell_type":"code","source":"# Define the model parameters\nMAX_LEN = 100\n\ndef get_model():\n    dropout_rate = 0.2\n\n    input_ids = Input(shape=(MAX_LEN,), dtype=tf.int32, name='input_ids')\n    attention_mask = Input(shape=(MAX_LEN,), dtype=tf.int32, name='attention_mask')\n\n    # Use DistilBERT's output\n    embeddings = distilbert([input_ids, attention_mask])[0][:, 0, :]  # CLS token output\n    print(embeddings)\n\n    out = Dropout(dropout_rate)(embeddings)\n    \n    # 64 units dense layer\n    out = Dense(64, activation='relu')(out)\n    out = Dropout(dropout_rate)(out)\n\n    y = Dense(1, activation='sigmoid')(out)\n    \n    model = Model(inputs=[input_ids, attention_mask], outputs=y)\n    model.layers[2].trainable = True  # Allow fine-tuning of DistilBERT\n    \n    # Define optimizer\n    optimizer = Adam(learning_rate=1e-05, epsilon=1e-08, decay=0.01, clipnorm=1.0)\n    \n    # Compile the model\n    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model\n\n# Define tokenization function\ndef get_tokens(X):\n    \n    X = tokenizer(\n                text=list(X),\n                add_special_tokens=True,\n                max_length=MAX_LEN,\n                truncation=True,\n                padding='max_length',  # Fixed: changed to 'max_length' to be more explicit\n                return_tensors='tf',\n                return_token_type_ids=False,  # DistilBERT doesn't use token type IDs\n                return_attention_mask=True,\n                verbose=True\n                )\n    \n    return X","metadata":{"execution":{"iopub.status.busy":"2024-10-02T01:51:57.655485Z","iopub.execute_input":"2024-10-02T01:51:57.656006Z","iopub.status.idle":"2024-10-02T01:51:57.668887Z","shell.execute_reply.started":"2024-10-02T01:51:57.655950Z","shell.execute_reply":"2024-10-02T01:51:57.667672Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# Initialize the DistilBERT tokenizer and model\ntokenizer = AutoTokenizer.from_pretrained('distilbert-base-uncased')  # Change: Use DistilBERT tokenizer\ndistilbert = TFDistilBertModel.from_pretrained('distilbert-base-uncased')  # Change: Use TFDistilBertModel\n\nmodel = get_model()\ntf.keras.utils.plot_model(model)","metadata":{"execution":{"iopub.status.busy":"2024-10-02T01:51:57.670686Z","iopub.execute_input":"2024-10-02T01:51:57.671223Z","iopub.status.idle":"2024-10-02T01:52:03.282229Z","shell.execute_reply.started":"2024-10-02T01:51:57.671167Z","shell.execute_reply":"2024-10-02T01:52:03.279811Z"},"trusted":true},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0066218a22dd458b9c1e8e7282d3e8b6"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/483 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"afd816e5b2a34289ad87ad8e6c45db47"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7da764a799ab410abddef202cb40f39c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8a47a46813744fe595475e2ff85f4c17"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/268M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b09ac9479c734c9798a60a6f98045e10"}},"metadata":{}},{"name":"stderr","text":"Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFDistilBertModel: ['vocab_transform.weight', 'vocab_layer_norm.bias', 'vocab_layer_norm.weight', 'vocab_projector.bias', 'vocab_transform.bias']\n- This IS expected if you are initializing TFDistilBertModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n- This IS NOT expected if you are initializing TFDistilBertModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\nAll the weights of TFDistilBertModel were initialized from the PyTorch model.\nIf your task is similar to the task the model of the checkpoint was trained on, you can already use TFDistilBertModel for predictions without further training.\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[10], line 5\u001b[0m\n\u001b[1;32m      2\u001b[0m tokenizer \u001b[38;5;241m=\u001b[39m AutoTokenizer\u001b[38;5;241m.\u001b[39mfrom_pretrained(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdistilbert-base-uncased\u001b[39m\u001b[38;5;124m'\u001b[39m)  \u001b[38;5;66;03m# Change: Use DistilBERT tokenizer\u001b[39;00m\n\u001b[1;32m      3\u001b[0m distilbert \u001b[38;5;241m=\u001b[39m TFDistilBertModel\u001b[38;5;241m.\u001b[39mfrom_pretrained(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdistilbert-base-uncased\u001b[39m\u001b[38;5;124m'\u001b[39m)  \u001b[38;5;66;03m# Change: Use TFDistilBertModel\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m model \u001b[38;5;241m=\u001b[39m \u001b[43mget_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      6\u001b[0m tf\u001b[38;5;241m.\u001b[39mkeras\u001b[38;5;241m.\u001b[39mutils\u001b[38;5;241m.\u001b[39mplot_model(model)\n","Cell \u001b[0;32mIn[9], line 11\u001b[0m, in \u001b[0;36mget_model\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m attention_mask \u001b[38;5;241m=\u001b[39m Input(shape\u001b[38;5;241m=\u001b[39m(MAX_LEN,), dtype\u001b[38;5;241m=\u001b[39mtf\u001b[38;5;241m.\u001b[39mint32, name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mattention_mask\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     10\u001b[0m \u001b[38;5;66;03m# Use DistilBERT's output\u001b[39;00m\n\u001b[0;32m---> 11\u001b[0m embeddings \u001b[38;5;241m=\u001b[39m \u001b[43mdistilbert\u001b[49m\u001b[43m(\u001b[49m\u001b[43m[\u001b[49m\u001b[43minput_ids\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mattention_mask\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m[\u001b[38;5;241m0\u001b[39m][:, \u001b[38;5;241m0\u001b[39m, :]  \u001b[38;5;66;03m# CLS token output\u001b[39;00m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;28mprint\u001b[39m(embeddings)\n\u001b[1;32m     14\u001b[0m out \u001b[38;5;241m=\u001b[39m Dropout(dropout_rate)(embeddings)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tf_keras/src/utils/traceback_utils.py:70\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     67\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m     68\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[1;32m     69\u001b[0m     \u001b[38;5;66;03m# `tf.debugging.disable_traceback_filtering()`\u001b[39;00m\n\u001b[0;32m---> 70\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m     71\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m     72\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/modeling_tf_utils.py:436\u001b[0m, in \u001b[0;36munpack_inputs.<locals>.run_call_with_unpacked_inputs\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    433\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    434\u001b[0m     config \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconfig\n\u001b[0;32m--> 436\u001b[0m unpacked_inputs \u001b[38;5;241m=\u001b[39m \u001b[43minput_processing\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfunc\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconfig\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfn_args_and_kwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    437\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39munpacked_inputs)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/modeling_tf_utils.py:530\u001b[0m, in \u001b[0;36minput_processing\u001b[0;34m(func, config, **kwargs)\u001b[0m\n\u001b[1;32m    528\u001b[0m             output[parameter_names[i]] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28minput\u001b[39m\n\u001b[1;32m    529\u001b[0m         \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 530\u001b[0m             \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    531\u001b[0m                 \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData of type \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28minput\u001b[39m)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m is not allowed only \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mallowed_types\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m is accepted for\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    532\u001b[0m                 \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mparameter_names[i]\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    533\u001b[0m             )\n\u001b[1;32m    534\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(main_input, Mapping):\n\u001b[1;32m    535\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124minputs\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m main_input:\n","\u001b[0;31mValueError\u001b[0m: Exception encountered when calling layer 'tf_distil_bert_model' (type TFDistilBertModel).\n\nData of type <class 'keras.src.backend.common.keras_tensor.KerasTensor'> is not allowed only (<class 'tensorflow.python.framework.tensor.Tensor'>, <class 'bool'>, <class 'int'>, <class 'transformers.utils.generic.ModelOutput'>, <class 'tuple'>, <class 'list'>, <class 'dict'>, <class 'numpy.ndarray'>) is accepted for input_ids.\n\nCall arguments received by layer 'tf_distil_bert_model' (type TFDistilBertModel):\n  • input_ids=['<KerasTensor shape=(None, 100), dtype=int32, sparse=None, name=input_ids>', '<KerasTensor shape=(None, 100), dtype=int32, sparse=None, name=attention_mask>']\n  • attention_mask=None\n  • head_mask=None\n  • inputs_embeds=None\n  • output_attentions=None\n  • output_hidden_states=None\n  • return_dict=None\n  • training=False"],"ename":"ValueError","evalue":"Exception encountered when calling layer 'tf_distil_bert_model' (type TFDistilBertModel).\n\nData of type <class 'keras.src.backend.common.keras_tensor.KerasTensor'> is not allowed only (<class 'tensorflow.python.framework.tensor.Tensor'>, <class 'bool'>, <class 'int'>, <class 'transformers.utils.generic.ModelOutput'>, <class 'tuple'>, <class 'list'>, <class 'dict'>, <class 'numpy.ndarray'>) is accepted for input_ids.\n\nCall arguments received by layer 'tf_distil_bert_model' (type TFDistilBertModel):\n  • input_ids=['<KerasTensor shape=(None, 100), dtype=int32, sparse=None, name=input_ids>', '<KerasTensor shape=(None, 100), dtype=int32, sparse=None, name=attention_mask>']\n  • attention_mask=None\n  • head_mask=None\n  • inputs_embeds=None\n  • output_attentions=None\n  • output_hidden_states=None\n  • return_dict=None\n  • training=False","output_type":"error"}]},{"cell_type":"markdown","source":"# Train and evaluate","metadata":{}},{"cell_type":"code","source":"# Split the train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=SEED)","metadata":{"execution":{"iopub.status.busy":"2024-10-02T01:52:03.283815Z","iopub.status.idle":"2024-10-02T01:52:03.284508Z","shell.execute_reply.started":"2024-10-02T01:52:03.284159Z","shell.execute_reply":"2024-10-02T01:52:03.284193Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"* Training the model","metadata":{}},{"cell_type":"code","source":"# Tokenize train and test sequences\nX_train_seq = get_tokens(X_train)\nX_test_seq = get_tokens(X_test)\n\n# Train the model\nhistory = model.fit(\n    x={'input_ids': X_train_seq['input_ids'], 'attention_mask': X_train_seq['attention_mask']},  # Change: Use 'attention_mask'\n    y=y_train,\n    epochs=10,\n    validation_split=0.2,\n    batch_size=32,\n    callbacks=[EarlyStopping(monitor='val_accuracy', mode='max', patience=3, verbose=False, restore_best_weights=True)]\n)","metadata":{"execution":{"iopub.status.busy":"2024-10-02T01:52:03.287232Z","iopub.status.idle":"2024-10-02T01:52:03.287904Z","shell.execute_reply.started":"2024-10-02T01:52:03.287553Z","shell.execute_reply":"2024-10-02T01:52:03.287604Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot the train/validation loss and accuracy\ndef plot_graphs(history, metric):\n    plt.plot(history.history[metric])\n    plt.plot(history.history['val_' + metric], '')\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(metric)\n    plt.legend([metric, 'val_' + metric])\n\nplt.figure(figsize=(16, 6))\nplt.subplot(1, 2, 1)\nplot_graphs(history, 'accuracy')\nplt.subplot(1, 2, 2)\nplot_graphs(history, 'loss')","metadata":{"execution":{"iopub.status.busy":"2024-10-02T01:52:03.289170Z","iopub.status.idle":"2024-10-02T01:52:03.289814Z","shell.execute_reply.started":"2024-10-02T01:52:03.289474Z","shell.execute_reply":"2024-10-02T01:52:03.289504Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"* Evaluate the model","metadata":{}},{"cell_type":"code","source":"# Predict the test set labels\nyhat = np.where(model.predict({'input_ids': X_test_seq['input_ids'], 'attention_mask': X_test_seq['attention_mask']}) >= 0.5, 1, 0)","metadata":{"execution":{"iopub.status.busy":"2024-10-02T01:52:03.291939Z","iopub.status.idle":"2024-10-02T01:52:03.292558Z","shell.execute_reply.started":"2024-10-02T01:52:03.292235Z","shell.execute_reply":"2024-10-02T01:52:03.292275Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Print classification report\nprint(classification_report(y_test, yhat))","metadata":{"execution":{"iopub.status.busy":"2024-10-02T01:52:03.295641Z","iopub.status.idle":"2024-10-02T01:52:03.296178Z","shell.execute_reply.started":"2024-10-02T01:52:03.295923Z","shell.execute_reply":"2024-10-02T01:52:03.295959Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot the confusion matrix\nplt.figure(figsize=(8, 6))\nsns.heatmap(confusion_matrix(y_test, yhat), annot=True, fmt='', cmap='Blues')\nplt.xlabel('Predicted Labels')\nplt.ylabel('Real Labels')","metadata":{"execution":{"iopub.status.busy":"2024-10-02T01:52:03.298146Z","iopub.status.idle":"2024-10-02T01:52:03.298822Z","shell.execute_reply.started":"2024-10-02T01:52:03.298465Z","shell.execute_reply":"2024-10-02T01:52:03.298501Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Save the model\nmodel.save('fake_news_distilbert.h5')  # Change: Save as DistilBERT model\nmodel.save_weights(\"fake_news_distilbert_weights\")","metadata":{"execution":{"iopub.status.busy":"2024-10-02T01:52:03.300707Z","iopub.status.idle":"2024-10-02T01:52:03.301356Z","shell.execute_reply.started":"2024-10-02T01:52:03.301024Z","shell.execute_reply":"2024-10-02T01:52:03.301056Z"},"trusted":true},"execution_count":null,"outputs":[]}]}