{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d25525f6",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-10-31T23:42:44.842383Z",
     "iopub.status.busy": "2024-10-31T23:42:44.842080Z",
     "iopub.status.idle": "2024-10-31T23:43:14.629531Z",
     "shell.execute_reply": "2024-10-31T23:43:14.628508Z"
    },
    "papermill": {
     "duration": 29.802174,
     "end_time": "2024-10-31T23:43:14.632028",
     "exception": false,
     "start_time": "2024-10-31T23:42:44.829854",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture \n",
    "# Set up a virtual environment and install necessary libraries\n",
    "!python3 -m venv venv # Create a new virtual environment named 'venv'\n",
    "!source venv/bin/activate # Activate the virtual environment\n",
    "!pip install tensorflow transformers # Install TensorFlow and Hugging Face transformers in the venv\n",
    "\n",
    "!pip install imbalanced-learn # Install the imbalanced-learn library, which provides tools for handling imbalanced datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f65036ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T23:43:14.655554Z",
     "iopub.status.busy": "2024-10-31T23:43:14.655230Z",
     "iopub.status.idle": "2024-10-31T23:43:33.710431Z",
     "shell.execute_reply": "2024-10-31T23:43:33.709459Z"
    },
    "papermill": {
     "duration": 19.069935,
     "end_time": "2024-10-31T23:43:33.712789",
     "exception": false,
     "start_time": "2024-10-31T23:43:14.642854",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Import necessary libraries and modules for data processing, machine learning, and NLP tasks\n",
    "import pandas as pd # Data manipulation and analysis\n",
    "import tensorflow as tf # Deep learning library\n",
    "from transformers import TFDistilBertModel, DistilBertTokenizer, TFDistilBertForSequenceClassification # Pre-trained models from Hugging Face Transformers library\n",
    "import pickle # Serializing and de-serializing Python object structures\n",
    "\n",
    "from sklearn.metrics import classification_report, confusion_matrix # For model evaluation metrics\n",
    "import seaborn as sns # Visualization library, especially for heatmaps\n",
    "import matplotlib.pyplot as plt # Plotting library\n",
    "\n",
    "from sklearn.utils.class_weight import compute_class_weight # Utility to compute class weights\n",
    "import numpy as np # Numerical operations on arrays\n",
    "\n",
    "from tensorflow.keras.layers import Dropout, Input, Dense, Lambda # Keras layers for building the model\n",
    "from tensorflow.keras.models import Model # Keras Model API for defining and training the model\n",
    "\n",
    "import os # Operating system utilities\n",
    "\n",
    "from imblearn.over_sampling import SMOTE # SMOTE for oversampling to handle class imbalance\n",
    "from sklearn.model_selection import train_test_split # Utility for splitting data into training and test sets\n",
    "\n",
    "from transformers import logging # Transformer logging utilities\n",
    "\n",
    "import warnings # Suppresses various warnings"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9822a577",
   "metadata": {
    "papermill": {
     "duration": 0.01011,
     "end_time": "2024-10-31T23:43:33.733722",
     "exception": false,
     "start_time": "2024-10-31T23:43:33.723612",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "brief summary of each imported module or function:\n",
    "* **pandas, numpy**: Used for handling and processing data in structured formats.\n",
    "* **tensorflow, transformers**: For building and running the DistilBERT model.\n",
    "* **classification_report, confusion_matrix**: For evaluating model predictions.\n",
    "* **seaborn, matplotlib.pyplot**: For data visualization, particularly confusion matrices.\n",
    "* **compute_class_weight, SMOTE**: For managing class imbalance in the dataset.\n",
    "* **train_test_split**: For splitting the dataset into training and test sets.\n",
    "* **warnings, logging**: To manage warnings and logging, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4dc51eb6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T23:43:33.756026Z",
     "iopub.status.busy": "2024-10-31T23:43:33.755083Z",
     "iopub.status.idle": "2024-10-31T23:43:39.114399Z",
     "shell.execute_reply": "2024-10-31T23:43:39.113369Z"
    },
    "papermill": {
     "duration": 5.372579,
     "end_time": "2024-10-31T23:43:39.116470",
     "exception": false,
     "start_time": "2024-10-31T23:43:33.743891",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>title</th>\n",
       "      <th>text</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>LAW ENFORCEMENT ON HIGH ALERT Following Threat...</td>\n",
       "      <td>No comment is expected from Barack Obama Membe...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Did they post their votes for Hillary already?</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>UNBELIEVABLE! OBAMA’S ATTORNEY GENERAL SAYS MO...</td>\n",
       "      <td>Now, most of the demonstrators gathered last ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Bobby Jindal, raised Hindu, uses story of Chri...</td>\n",
       "      <td>A dozen politically active pastors came here f...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>SATAN 2: Russia unvelis an image of its terrif...</td>\n",
       "      <td>The RS-28 Sarmat missile, dubbed Satan 2, will...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0                                              title  \\\n",
       "0           0  LAW ENFORCEMENT ON HIGH ALERT Following Threat...   \n",
       "1           1                                                NaN   \n",
       "2           2  UNBELIEVABLE! OBAMA’S ATTORNEY GENERAL SAYS MO...   \n",
       "3           3  Bobby Jindal, raised Hindu, uses story of Chri...   \n",
       "4           4  SATAN 2: Russia unvelis an image of its terrif...   \n",
       "\n",
       "                                                text  label  \n",
       "0  No comment is expected from Barack Obama Membe...      1  \n",
       "1     Did they post their votes for Hillary already?      1  \n",
       "2   Now, most of the demonstrators gathered last ...      1  \n",
       "3  A dozen politically active pastors came here f...      0  \n",
       "4  The RS-28 Sarmat missile, dubbed Satan 2, will...      1  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the dataset from a CSV file\n",
    "df = pd.read_csv(\"/kaggle/input/fake-news-classification/WELFake_Dataset.csv\")\n",
    "# Display the first few rows of the dataset to understand its structure\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1ef076f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T23:43:39.139667Z",
     "iopub.status.busy": "2024-10-31T23:43:39.139320Z",
     "iopub.status.idle": "2024-10-31T23:43:39.154294Z",
     "shell.execute_reply": "2024-10-31T23:43:39.152799Z"
    },
    "papermill": {
     "duration": 0.030439,
     "end_time": "2024-10-31T23:43:39.157846",
     "exception": false,
     "start_time": "2024-10-31T23:43:39.127407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label\n",
       "1    37106\n",
       "0    35028\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the distribution of labels (e.g., how many instances are fake vs. real news)\n",
    "df['label'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2b7bfe60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T23:43:39.193656Z",
     "iopub.status.busy": "2024-10-31T23:43:39.193043Z",
     "iopub.status.idle": "2024-10-31T23:43:39.227704Z",
     "shell.execute_reply": "2024-10-31T23:43:39.226563Z"
    },
    "papermill": {
     "duration": 0.055939,
     "end_time": "2024-10-31T23:43:39.230648",
     "exception": false,
     "start_time": "2024-10-31T23:43:39.174709",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Extract the text and labels into separate lists for easy processing\n",
    "x = list(df['text']) # 'x' will hold the text data\n",
    "y = list(df['label']) # 'y' will hold the corresponding labels (e.g., fake or real)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2d37b2d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T23:43:39.254443Z",
     "iopub.status.busy": "2024-10-31T23:43:39.254119Z",
     "iopub.status.idle": "2024-10-31T23:43:40.324788Z",
     "shell.execute_reply": "2024-10-31T23:43:40.323982Z"
    },
    "papermill": {
     "duration": 1.084328,
     "end_time": "2024-10-31T23:43:40.326895",
     "exception": false,
     "start_time": "2024-10-31T23:43:39.242567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "330ea32c377243c7b4e43ca895ac26d5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2a7207dc6e454b9c971a81fb2e3bb0db",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "01f302b8a6094271896cfb638604f253",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3fda809da0fe4230a4e7a750d37baa5f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/483 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Suppress future warnings from appearing in the output\n",
    "warnings.filterwarnings(\"ignore\", category=FutureWarning)\n",
    "# Set up the model and tokenizer parameters\n",
    "MODEL_NAME = 'distilbert-base-uncased' # Use the pre-trained 'distilbert-base-uncased' model from Hugging Face\n",
    "MAX_LEN = 100 # Maximum token length for each input sequence; sequences longer than this will be truncated\n",
    "\n",
    "# For illustration, we'll process the first review in the dataset\n",
    "review = x[0]\n",
    "\n",
    "# Initialize the tokenizer for DistilBERT\n",
    "tokenizer = DistilBertTokenizer.from_pretrained(MODEL_NAME)\n",
    "# Tokenize the sample review with specified max length and padding\n",
    "inputs = tokenizer(review, max_length=MAX_LEN, truncation=True, padding=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dff310e9",
   "metadata": {
    "papermill": {
     "duration": 0.011198,
     "end_time": "2024-10-31T23:43:40.350384",
     "exception": false,
     "start_time": "2024-10-31T23:43:40.339186",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* **Warning Suppression**: warnings.filterwarnings is used to suppress future warnings from TensorFlow and other libraries.\n",
    "* **Model and Tokenizer Setup**: We specify MODEL_NAME as distilbert-base-uncased, and MAX_LEN limits each tokenized sequence to 100 tokens.\n",
    "* **Tokenization**: The tokenizer converts the review into input IDs and attention masks. truncation=True ensures longer texts are cut to MAX_LEN, and padding=True adds padding to make all sequences of uniform length."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "beb5a7b0",
   "metadata": {
    "papermill": {
     "duration": 0.011327,
     "end_time": "2024-10-31T23:43:40.373156",
     "exception": false,
     "start_time": "2024-10-31T23:43:40.361829",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Define Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fd65c397",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T23:43:40.397159Z",
     "iopub.status.busy": "2024-10-31T23:43:40.396839Z",
     "iopub.status.idle": "2024-10-31T23:43:40.401601Z",
     "shell.execute_reply": "2024-10-31T23:43:40.400779Z"
    },
    "papermill": {
     "duration": 0.018992,
     "end_time": "2024-10-31T23:43:40.403542",
     "exception": false,
     "start_time": "2024-10-31T23:43:40.384550",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define a helper function for encoding inputs using the DistilBERT tokenizer\n",
    "def construct_encodings(x, tokenizer, max_len, trucation=True, padding=True):\n",
    "    # Tokenize the input list `x` with specified maximum length, truncation, and padding\n",
    "    return tokenizer(x, max_length=max_len, truncation=trucation, padding=padding)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2bb64f2",
   "metadata": {
    "papermill": {
     "duration": 0.010993,
     "end_time": "2024-10-31T23:43:40.425934",
     "exception": false,
     "start_time": "2024-10-31T23:43:40.414941",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* **Helper Function (construct_encodings)**: This function uses the tokenizer to encode a list of texts (x) with the specified max_len, truncation, and padding options, making it reusable for different parts of the pipeline."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d75ac9c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T23:43:40.449894Z",
     "iopub.status.busy": "2024-10-31T23:43:40.449587Z",
     "iopub.status.idle": "2024-11-01T00:08:50.201763Z",
     "shell.execute_reply": "2024-11-01T00:08:50.200641Z"
    },
    "papermill": {
     "duration": 1509.767304,
     "end_time": "2024-11-01T00:08:50.204848",
     "exception": false,
     "start_time": "2024-10-31T23:43:40.437544",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Convert all items in `x` to strings to ensure compatibility with the tokenizer\n",
    "x = [str(item) for item in x]\n",
    "\n",
    "# Encode the input texts (`x`) using the specified tokenizer and maximum length\n",
    "encodings = construct_encodings(x, tokenizer, max_len=MAX_LEN)\n",
    "# Set up constants for data split and batch processing\n",
    "TEST_SPLIT = 0.3 # Define the proportion of data to be used for testing\n",
    "BATCH_SIZE = 8 # Define the batch size for training and evaluation\n",
    "\n",
    "# Separate the encoded results into input IDs and attention masks\n",
    "input_ids = encodings['input_ids'] # Tokenized IDs for each word in the texts\n",
    "attention_masks = encodings['attention_mask'] # Masks indicating real tokens (1) vs padding (0)\n",
    "\n",
    "# Split the data into training and testing sets (both input data and attention masks)\n",
    "x_train, x_test, y_train, y_test, masks_train, masks_test = train_test_split(\n",
    "    input_ids,            # Tokenized text input IDs for training/testing\n",
    "    y,                    # Corresponding labels for training/testing\n",
    "    attention_masks,      # Attention masks for training/testing\n",
    "    test_size=TEST_SPLIT, # Ratio for test data\n",
    "    random_state=42,      # Seed for reproducibility\n",
    "    stratify=y            # Maintain label distribution in train and test splits\n",
    ")\n",
    "\n",
    "# Initialize SMOTE (Synthetic Minority Over-sampling Technique) for handling class imbalance in training data\n",
    "smote = SMOTE(random_state=42)\n",
    "# Apply SMOTE only on the training data (input IDs and labels) to create synthetic samples for the minority class\n",
    "x_train_resampled, y_train_resampled = smote.fit_resample(x_train, y_train)\n",
    "\n",
    "# Adjust attention masks for the new samples generated by SMOTE\n",
    "# Note: SMOTE only generates synthetic samples for input features. We use `np.repeat` to match the number of masks\n",
    "masks_train_resampled = np.repeat(\n",
    "    masks_train, # Original masks for training\n",
    "    np.ceil(len(x_train_resampled) / len(masks_train)).astype(int), # Repeat factor to match new length\n",
    "    axis=0 # Repeat along the rows\n",
    ")[:len(x_train_resampled)] # Trim to exactly match the length of resampled data\n",
    "\n",
    "# Reconstruct encodings with resampled data for input IDs and attention masks\n",
    "train_encodings = {'input_ids': x_train_resampled, 'attention_mask': masks_train_resampled}\n",
    "test_encodings = {'input_ids': x_test, 'attention_mask': masks_test}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7a7fe54",
   "metadata": {
    "papermill": {
     "duration": 0.01094,
     "end_time": "2024-11-01T00:08:50.228201",
     "exception": false,
     "start_time": "2024-11-01T00:08:50.217261",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Data Preparation**:\n",
    "* Converts x into a list of strings for tokenization.\n",
    "* Encodes all texts in x to get token IDs and attention masks.\n",
    "* Splits data into training and testing using train_test_split, preserving the label distribution with stratify=y.\n",
    "\n",
    "**SMOTE (Synthetic Minority Over-sampling Technique)**:\n",
    "* Applied only on x_train to handle data imbalance in the training set, generating synthetic samples for the minority class.\n",
    "* Adjusts the masks_train for the new samples created by SMOTE. Since SMOTE only applies to feature data (input IDs), we use np.repeat to duplicate masks_train to match the new size, then trim it as necessary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a541086b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T00:08:50.252025Z",
     "iopub.status.busy": "2024-11-01T00:08:50.251656Z",
     "iopub.status.idle": "2024-11-01T00:08:50.257037Z",
     "shell.execute_reply": "2024-11-01T00:08:50.256192Z"
    },
    "papermill": {
     "duration": 0.019558,
     "end_time": "2024-11-01T00:08:50.258933",
     "exception": false,
     "start_time": "2024-11-01T00:08:50.239375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define a function to construct TensorFlow datasets from encodings\n",
    "def construct_tfdataset(encodings, y=None):\n",
    "    if y is not None:\n",
    "        # If labels are provided, include them in the dataset (for supervised learning)\n",
    "        return tf.data.Dataset.from_tensor_slices((dict(encodings), y))\n",
    "    else:\n",
    "        # If labels are not provided, use only the inputs (for inference)\n",
    "        return tf.data.Dataset.from_tensor_slices(dict(encodings))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0d8fadf5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T00:08:50.282360Z",
     "iopub.status.busy": "2024-11-01T00:08:50.282054Z",
     "iopub.status.idle": "2024-11-01T00:09:19.130661Z",
     "shell.execute_reply": "2024-11-01T00:09:19.129607Z"
    },
    "papermill": {
     "duration": 28.862815,
     "end_time": "2024-11-01T00:09:19.132966",
     "exception": false,
     "start_time": "2024-11-01T00:08:50.270151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create TensorFlow datasets for training and testing\n",
    "# The training dataset uses SMOTE-resampled input IDs and labels\n",
    "tfdataset_train = construct_tfdataset(train_encodings, y_train_resampled).batch(BATCH_SIZE)\n",
    "# The testing dataset uses the original test set without SMOTE\n",
    "tfdataset_test = construct_tfdataset(test_encodings, y_test).batch(BATCH_SIZE)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c5f76be",
   "metadata": {
    "papermill": {
     "duration": 0.01105,
     "end_time": "2024-11-01T00:09:19.155667",
     "exception": false,
     "start_time": "2024-11-01T00:09:19.144617",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**TensorFlow Dataset Construction**:\n",
    "* construct_tfdataset builds TensorFlow datasets from the encodings and labels (if provided).\n",
    "* tfdataset_train and tfdataset_test are batched datasets ready for training and evaluation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2a3926f",
   "metadata": {
    "papermill": {
     "duration": 0.01088,
     "end_time": "2024-11-01T00:09:19.177730",
     "exception": false,
     "start_time": "2024-11-01T00:09:19.166850",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train and evaluate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8f8d7c84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T00:09:19.201951Z",
     "iopub.status.busy": "2024-11-01T00:09:19.200914Z",
     "iopub.status.idle": "2024-11-01T00:09:22.350644Z",
     "shell.execute_reply": "2024-11-01T00:09:22.349756Z"
    },
    "papermill": {
     "duration": 3.163865,
     "end_time": "2024-11-01T00:09:22.352674",
     "exception": false,
     "start_time": "2024-11-01T00:09:19.188809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2e4bb96161e049e98fd58c82d50f86bd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/268M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"functional_1\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n",
       "│ input_ids           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ attention_mask      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ lambda (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Lambda</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ input_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n",
       "│                     │                   │            │ attention_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ get_item (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ lambda[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]      │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ get_item[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │      <span style=\"color: #00af00; text-decoration-color: #00af00\">1,538</span> │ dropout[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n",
       "└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n",
       "│ input_ids           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n",
       "│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ attention_mask      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n",
       "│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ lambda (\u001b[38;5;33mLambda\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m768\u001b[0m)  │          \u001b[38;5;34m0\u001b[0m │ input_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n",
       "│                     │                   │            │ attention_mask[\u001b[38;5;34m0\u001b[0m… │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ get_item (\u001b[38;5;33mGetItem\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m768\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ lambda[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]      │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m768\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ get_item[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n",
       "├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │      \u001b[38;5;34m1,538\u001b[0m │ dropout[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n",
       "└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,538</span> (6.01 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,538\u001b[0m (6.01 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,538</span> (6.01 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,538\u001b[0m (6.01 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Suppress warnings from the transformers library when loading the model\n",
    "logging.set_verbosity_error()\n",
    "\n",
    "# Define model parameters for training\n",
    "N_EPOCHS = 5 # Number of epochs to train the model\n",
    "DROPOUT_RATE = 0.3 # Dropout rate for regularization to prevent overfitting\n",
    "\n",
    "# Load the pre-trained DistilBERT model (only the base model without a classification head)\n",
    "base_model = TFDistilBertModel.from_pretrained(MODEL_NAME)\n",
    "\n",
    "# Define input layers for input IDs and attention masks as required by the DistilBERT model\n",
    "input_ids = Input(shape=(MAX_LEN,), dtype=tf.int32, name=\"input_ids\") # Input IDs for tokens\n",
    "attention_mask = Input(shape=(MAX_LEN,), dtype=tf.int32, name=\"attention_mask\") # Attention mask for padding\n",
    "\n",
    "# Wrap the base model in a Lambda layer to make sure the model works with the custom Keras model structure\n",
    "distilbert_output = Lambda(\n",
    "    lambda x: base_model(x[0], attention_mask=x[1])[0],  # Obtain the last hidden state (sequence output)\n",
    "    output_shape=(MAX_LEN, base_model.config.hidden_size) # Define output shape for Lambda layer\n",
    ")([input_ids, attention_mask])\n",
    "\n",
    "# Extract the [CLS] token's hidden state (first token in each sequence) for classification\n",
    "hidden_state = distilbert_output[:, 0, :]  # Select the [CLS] token representation\n",
    "\n",
    "# Apply dropout to the hidden state to reduce overfitting\n",
    "dropout = Dropout(DROPOUT_RATE)(hidden_state)\n",
    "\n",
    "# Define the output layer with softmax activation for binary classification (two classes)\n",
    "output = Dense(2, activation='softmax')(dropout)\n",
    "\n",
    "# Create a Keras model that includes the input layers and the output layer\n",
    "model = Model(inputs=[input_ids, attention_mask], outputs=output)\n",
    "# Set up the optimizer with a low learning rate for fine-tuning the pre-trained model\n",
    "optimizer = tf.keras.optimizers.Adam(learning_rate=1e-5, clipnorm=1.0)\n",
    "# Compile the model with sparse categorical cross-entropy loss for integer labels\n",
    "model.compile(optimizer=optimizer, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False), metrics=['accuracy'])\n",
    "\n",
    "# Print model summary to review the architecture and parameter count\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f37841d",
   "metadata": {
    "papermill": {
     "duration": 0.012024,
     "end_time": "2024-11-01T00:09:22.377327",
     "exception": false,
     "start_time": "2024-11-01T00:09:22.365303",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Logging and Warning Suppression**: The code starts by suppressing warnings from the transformers library and TensorFlow to make the output cleaner. It also suppresses FutureWarning from libraries that might display deprecation notices.\n",
    "\n",
    "**Model Architecture**:\n",
    "\n",
    "* Loads the DistilBERT base model without a classification layer, allowing us to customize the output layers.\n",
    "* Defines input layers (input_ids and attention_mask) and wraps the DistilBERT output in a Lambda layer to handle the specific architecture.\n",
    "* The [CLS] token's output is selected as it’s commonly used for sequence-level classification tasks.\n",
    "* Applies dropout and a dense output layer with softmax activation for binary classification.\n",
    "\n",
    "**Optimizer and Compilation**:\n",
    "\n",
    "* Sets a small learning rate to fine-tune the pre-trained model effectively, avoiding drastic changes to the learned weights.\n",
    "* Uses sparse categorical cross-entropy for binary classification with integer labels."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc75b805",
   "metadata": {
    "papermill": {
     "duration": 0.011994,
     "end_time": "2024-11-01T00:09:22.401508",
     "exception": false,
     "start_time": "2024-11-01T00:09:22.389514",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Changes:** I added Gradient Clipping(clipnorm=1.0) and increased dropout rate to resolve overfitting\n",
    "\n",
    "* Gradient clipping ensures that updates to model weights don’t become too large, maintaining stability during training.\n",
    "* Track F1-score and precision/recall to ensure balanced performance. The classification report shows data imbalance so added this to monitor.\n",
    "* I added a Dropout layer with a rate of 0.3 after the DistilBERT output. This change aims to reduce overfitting by randomly deactivating 30% of neurons during training, which can help the model generalize better to new data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0a8293ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T00:09:22.427596Z",
     "iopub.status.busy": "2024-11-01T00:09:22.427180Z",
     "iopub.status.idle": "2024-11-01T00:09:22.449052Z",
     "shell.execute_reply": "2024-11-01T00:09:22.448184Z"
    },
    "papermill": {
     "duration": 0.037486,
     "end_time": "2024-11-01T00:09:22.451168",
     "exception": false,
     "start_time": "2024-11-01T00:09:22.413682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class Weights: {0: 1.029661984697956, 1: 0.971999137605778}\n"
     ]
    }
   ],
   "source": [
    "# Calculate class weights to handle class imbalance, ensuring balanced learning\n",
    "class_weights = compute_class_weight(\n",
    "    class_weight='balanced', # Method to calculate balanced weights\n",
    "    classes=np.unique(y),    # Unique class labels\n",
    "    y=y                      # Actual labels\n",
    ")\n",
    "class_weights_dict = dict(enumerate(class_weights)) # Convert to dictionary format for Keras\n",
    "print(\"Class Weights:\", class_weights_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4447827",
   "metadata": {
    "papermill": {
     "duration": 0.01217,
     "end_time": "2024-11-01T00:09:22.476708",
     "exception": false,
     "start_time": "2024-11-01T00:09:22.464538",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Class Weights**: Computes balanced class weights to address any class imbalance, helping the model to avoid bias toward the majority class."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed32d911",
   "metadata": {
    "papermill": {
     "duration": 0.012208,
     "end_time": "2024-11-01T00:09:22.501230",
     "exception": false,
     "start_time": "2024-11-01T00:09:22.489022",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Changes:** I added class weights to address data imbalance.\n",
    "\n",
    "* Class weights help to give more importance to the minority class during training, which balances out the learning process.\n",
    "* This method is suitable because it integrates well with the model.fit() method of Keras without needing to change the structure of the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a5838e63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T00:09:22.528423Z",
     "iopub.status.busy": "2024-11-01T00:09:22.528035Z",
     "iopub.status.idle": "2024-11-01T00:28:02.392655Z",
     "shell.execute_reply": "2024-11-01T00:28:02.391613Z"
    },
    "papermill": {
     "duration": 1120.818836,
     "end_time": "2024-11-01T00:28:03.332352",
     "exception": false,
     "start_time": "2024-11-01T00:09:22.513516",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1730419768.658849      87 service.cc:145] XLA service 0x790584016d10 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1730419768.658904      87 service.cc:153]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\n",
      "I0000 00:00:1730419768.658909      87 service.cc:153]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\n",
      "W0000 00:00:1730419768.996308      87 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1730419772.050952     122 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'triton_gemm_dot_1', 8 bytes spill stores, 8 bytes spill loads\n",
      "\n",
      "I0000 00:00:1730419776.666453     121 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'triton_gemm_dot_1', 1256 bytes spill stores, 1212 bytes spill loads\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m   7/6494\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m2:09\u001b[0m 20ms/step - accuracy: 0.3506 - loss: 0.7889"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1730419778.519542      87 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m6493/6494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.5995 - loss: 0.6605"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1730419916.468632      87 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\n",
      "I0000 00:00:1730419923.609399     143 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'triton_gemm_dot_1', 1256 bytes spill stores, 1212 bytes spill loads\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m6494/6494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.5995 - loss: 0.6605"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1730419927.024944      88 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\n",
      "W0000 00:00:1730419989.208766      89 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\n",
      "I0000 00:00:1730419997.083932     170 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'triton_gemm_dot_14', 1096 bytes spill stores, 1084 bytes spill loads\n",
      "\n",
      "I0000 00:00:1730419997.945047     171 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'triton_gemm_dot', 1312 bytes spill stores, 1312 bytes spill loads\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m6494/6494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m236s\u001b[0m 34ms/step - accuracy: 0.5995 - loss: 0.6605 - val_accuracy: 0.7498 - val_loss: 0.5207\n",
      "Epoch 2/5\n",
      "\u001b[1m6494/6494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m207s\u001b[0m 32ms/step - accuracy: 0.7733 - loss: 0.4988 - val_accuracy: 0.7910 - val_loss: 0.4526\n",
      "Epoch 3/5\n",
      "\u001b[1m6494/6494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m262s\u001b[0m 32ms/step - accuracy: 0.8072 - loss: 0.4399 - val_accuracy: 0.8067 - val_loss: 0.4183\n",
      "Epoch 4/5\n",
      "\u001b[1m6494/6494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m207s\u001b[0m 32ms/step - accuracy: 0.8168 - loss: 0.4087 - val_accuracy: 0.8199 - val_loss: 0.3953\n",
      "Epoch 5/5\n",
      "\u001b[1m6494/6494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m207s\u001b[0m 32ms/step - accuracy: 0.8275 - loss: 0.3867 - val_accuracy: 0.8277 - val_loss: 0.3803\n"
     ]
    }
   ],
   "source": [
    "# Suppress FutureWarnings for cleaner output\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Train the model with the defined training and validation datasets\n",
    "history = model.fit(\n",
    "    tfdataset_train, # Training data\n",
    "    validation_data=tfdataset_test, # Validation data to monitor val_loss and val_accuracy\n",
    "    epochs=N_EPOCHS, # Number of epochs\n",
    "    validation_freq=1, # Validate the model after each epoch\n",
    "    class_weight=class_weights_dict, # Apply class weights to address class imbalance\n",
    ")\n",
    "\n",
    "# Suppress TensorFlow warnings and informational messages for a cleaner output\n",
    "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25458cbc",
   "metadata": {
    "papermill": {
     "duration": 0.915599,
     "end_time": "2024-11-01T00:28:05.129083",
     "exception": false,
     "start_time": "2024-11-01T00:28:04.213484",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Training**: Trains the model for the specified epochs and validates after each epoch, using the class_weights_dict to account for imbalance."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5986327",
   "metadata": {
    "papermill": {
     "duration": 0.923088,
     "end_time": "2024-11-01T00:28:06.935685",
     "exception": false,
     "start_time": "2024-11-01T00:28:06.012597",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    " **Changes:** I added validation_freq=1\n",
    "* By default, model.fit() validates at the end of each epoch, but you can adjust this to validate more frequently to keep a closer eye on validation performance.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2f4b84b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T00:28:08.813828Z",
     "iopub.status.busy": "2024-11-01T00:28:08.813428Z",
     "iopub.status.idle": "2024-11-01T00:29:10.097272Z",
     "shell.execute_reply": "2024-11-01T00:29:10.096380Z"
    },
    "papermill": {
     "duration": 63.137149,
     "end_time": "2024-11-01T00:29:10.953198",
     "exception": false,
     "start_time": "2024-11-01T00:28:07.816049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2706/2706\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m61s\u001b[0m 23ms/step - accuracy: 0.8278 - loss: 0.3836\n",
      "{'accuracy': 0.8276881575584412, 'loss': 0.38030970096588135}\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model on the test dataset and store evaluation metrics in `benchmarks`\n",
    "benchmarks = model.evaluate(tfdataset_test, return_dict=True, batch_size=BATCH_SIZE)\n",
    "print(benchmarks) # Print out the evaluation metrics such as accuracy and loss for review"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4895cde",
   "metadata": {
    "papermill": {
     "duration": 0.993335,
     "end_time": "2024-11-01T00:29:12.935321",
     "exception": false,
     "start_time": "2024-11-01T00:29:11.941986",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Evaluation**:\n",
    "\n",
    "* model.evaluate is used to evaluate the model on the test dataset, tfdataset_test, and return_dict=True ensures that the metrics are returned as a dictionary (e.g., {\"loss\": ..., \"accuracy\": ...}). This is useful for getting structured output from the evaluation.\n",
    "* print(benchmarks) outputs the evaluation results, which helps in understanding the model's performance on unseen data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6fd48614",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T00:29:14.872899Z",
     "iopub.status.busy": "2024-11-01T00:29:14.871987Z",
     "iopub.status.idle": "2024-11-01T00:29:15.062541Z",
     "shell.execute_reply": "2024-11-01T00:29:15.061775Z"
    },
    "papermill": {
     "duration": 1.181964,
     "end_time": "2024-11-01T00:29:15.064623",
     "exception": false,
     "start_time": "2024-11-01T00:29:13.882659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Function to create a predictor that accepts text input and outputs a probability\n",
    "def create_predictor(model, model_name, max_len):\n",
    "    # Load the tokenizer from the DistilBERT model\n",
    "    tkzr = DistilBertTokenizer.from_pretrained(model_name)\n",
    "    # Inner function that performs the prediction for a single text input\n",
    "    def predict_proba(text):\n",
    "        x = [text] # Wrap the input text in a list to be processed by the tokenizer\n",
    "\n",
    "        # Tokenize the text, setting parameters for padding, truncation, and avoiding warnings\n",
    "        # Explicitly set `clean_up_tokenization_spaces` to avoid warnings from the tokenizer\n",
    "        encodings = construct_encodings(x, tkzr, max_len=max_len, padding=True, truncation=True, clean_up_tokenization_spaces=True)\n",
    "        \n",
    "        # Construct a TensorFlow dataset from the tokenized encodings\n",
    "        tfdataset = construct_tfdataset(encodings)\n",
    "        tfdataset = tfdataset.batch(1) # Batch size of 1 since this is for single predictions\n",
    "\n",
    "        # Use the model to predict logits for the input text\n",
    "        preds = model.predict(tfdataset).logits\n",
    "        # Apply softmax to logits to get the probability of each class\n",
    "        preds = tf.nn.softmax(tf.convert_to_tensor(preds)).numpy() # Using tf.nn.softmax for clarity\n",
    "        return preds[0][0] # Return the probability for the positive class\n",
    "    \n",
    "    # Return the `predict_proba` function, which can be used for predictions on individual inputs\n",
    "    return predict_proba\n",
    "\n",
    "# Create the predictor function for the model, which will process individual text inputs\n",
    "clf = create_predictor(model, MODEL_NAME, MAX_LEN)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05708baa",
   "metadata": {
    "papermill": {
     "duration": 0.989531,
     "end_time": "2024-11-01T00:29:17.060972",
     "exception": false,
     "start_time": "2024-11-01T00:29:16.071441",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Predictor Creation (create_predictor)**:\n",
    "\n",
    "* This function creates a predictor function (predict_proba) for the DistilBERT model, making it easier to run predictions on individual text samples after training.\n",
    "* Tokenization: construct_encodings tokenizes the text input, ensuring that padding and truncation are applied consistently, and clean_up_tokenization_spaces=True is explicitly set to avoid warnings from the tokenizer.\n",
    "* Softmax Application: The logits (raw prediction scores) from model.predict are converted to probabilities using tf.nn.softmax, which provides a normalized score between 0 and 1 for each class.\n",
    "\n",
    "**Return Predictor**: The predict_proba function can be called with a single text input, making it easy to run predictions without reconfiguring the model each time."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01685a90",
   "metadata": {
    "papermill": {
     "duration": 0.985931,
     "end_time": "2024-11-01T00:29:18.988745",
     "exception": false,
     "start_time": "2024-11-01T00:29:18.002814",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**The code below is what I added since the original code didn’t include any visualization. I referred to the second reference code (BERT model) since it had a lot of visualizations. I’ve added things like the confusion matrix and classification report.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26a32c2b",
   "metadata": {
    "papermill": {
     "duration": 0.963561,
     "end_time": "2024-11-01T00:29:20.966350",
     "exception": false,
     "start_time": "2024-11-01T00:29:20.002789",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "182bb005",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T00:29:22.999739Z",
     "iopub.status.busy": "2024-11-01T00:29:22.999035Z",
     "iopub.status.idle": "2024-11-01T00:29:23.479369Z",
     "shell.execute_reply": "2024-11-01T00:29:23.478473Z"
    },
    "papermill": {
     "duration": 1.463279,
     "end_time": "2024-11-01T00:29:23.481279",
     "exception": false,
     "start_time": "2024-11-01T00:29:22.018000",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 1. Function to Plot Training and Validation Loss and Accuracy\n",
    "def plot_metrics(history):\n",
    "    plt.figure(figsize=(12, 5))\n",
    "    # Plot Training and Validation Accuracy over epochs\n",
    "    plt.subplot(1, 2, 1) \n",
    "    plt.plot(history.history['accuracy'], label='Train Accuracy')\n",
    "    plt.plot(history.history['val_accuracy'], label='Validation Accuracy') \n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Accuracy')\n",
    "    plt.title('Training and Validation Accuracy')\n",
    "    plt.legend()\n",
    "\n",
    "    # Plot loss\n",
    "    plt.subplot(1, 2, 2)\n",
    "    plt.plot(history.history['loss'], label='Train Loss')\n",
    "    plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.title('Training and Validation Loss')\n",
    "    plt.legend()\n",
    "\n",
    "    plt.show()\n",
    "\n",
    "plot_metrics(history)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10313cdb",
   "metadata": {
    "papermill": {
     "duration": 0.965585,
     "end_time": "2024-11-01T00:29:25.479185",
     "exception": false,
     "start_time": "2024-11-01T00:29:24.513600",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Plotting Training and Validation Metrics**:\n",
    "\n",
    "The plot_metrics function visualizes how training and validation accuracy and loss change over epochs. This is crucial for diagnosing overfitting or underfitting by observing if the training and validation metrics diverge."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "99e8438e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T00:29:27.512820Z",
     "iopub.status.busy": "2024-11-01T00:29:27.512062Z",
     "iopub.status.idle": "2024-11-01T00:30:35.342759Z",
     "shell.execute_reply": "2024-11-01T00:30:35.341928Z"
    },
    "papermill": {
     "duration": 68.860602,
     "end_time": "2024-11-01T00:30:35.344978",
     "exception": false,
     "start_time": "2024-11-01T00:29:26.484376",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1730420968.455636      87 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2705/2706\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1730421032.877488      87 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2706/2706\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m66s\u001b[0m 24ms/step\n"
     ]
    }
   ],
   "source": [
    "# 2. Evaluate the Model on Test Data and Generate Predictions\n",
    "# Predict the probabilities for the test dataset\n",
    "y_pred_probs = model.predict(tfdataset_test)\n",
    "# Convert predicted probabilities to label indices by taking the class with the highest probability\n",
    "y_pred = tf.argmax(y_pred_probs, axis=1).numpy()\n",
    "\n",
    "# Suppress TensorFlow warnings\n",
    "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # Set to '2' for warnings only, '3' to suppress info & warnings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0cd010f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T00:30:37.467100Z",
     "iopub.status.busy": "2024-11-01T00:30:37.466098Z",
     "iopub.status.idle": "2024-11-01T00:30:43.541460Z",
     "shell.execute_reply": "2024-11-01T00:30:43.540664Z"
    },
    "papermill": {
     "duration": 7.12783,
     "end_time": "2024-11-01T00:30:43.543743",
     "exception": false,
     "start_time": "2024-11-01T00:30:36.415913",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Get true labels from the test dataset for comparison\n",
    "y_true = []\n",
    "for _, labels in tfdataset_test.unbatch(): # Unbatch the dataset to access individual labels\n",
    "    y_true.append(labels.numpy()) # Append each label to y_true list\n",
    "    \n",
    "# Convert the list of labels to a TensorFlow tensor and then to a NumPy array for compatibility with metrics functions\n",
    "y_true = tf.convert_to_tensor(y_true).numpy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62e8fcac",
   "metadata": {
    "papermill": {
     "duration": 1.020554,
     "end_time": "2024-11-01T00:30:45.627648",
     "exception": false,
     "start_time": "2024-11-01T00:30:44.607094",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Evaluation and Prediction**:\n",
    "\n",
    "Predictions are generated for the test dataset, and then the predicted class labels (y_pred) are compared to the true labels (y_true). This allows you to compute accuracy and other metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d774d517",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T00:30:47.721613Z",
     "iopub.status.busy": "2024-11-01T00:30:47.720720Z",
     "iopub.status.idle": "2024-11-01T00:30:47.769862Z",
     "shell.execute_reply": "2024-11-01T00:30:47.768771Z"
    },
    "papermill": {
     "duration": 1.076252,
     "end_time": "2024-11-01T00:30:47.771766",
     "exception": false,
     "start_time": "2024-11-01T00:30:46.695514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.79      0.88      0.83     10509\n",
      "           1       0.87      0.78      0.82     11132\n",
      "\n",
      "    accuracy                           0.83     21641\n",
      "   macro avg       0.83      0.83      0.83     21641\n",
      "weighted avg       0.83      0.83      0.83     21641\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# 3. Print Classification Report\n",
    "# Generate a classification report to evaluate model performance on different metrics\n",
    "print(\"Classification Report:\")\n",
    "print(classification_report(y_true, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ed062b9",
   "metadata": {
    "papermill": {
     "duration": 1.132461,
     "end_time": "2024-11-01T00:30:49.963830",
     "exception": false,
     "start_time": "2024-11-01T00:30:48.831369",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Classification Report**:\n",
    "\n",
    "The classification report gives detailed information on precision, recall, and F1-score for each class, as well as overall metrics. This is particularly useful for assessing performance on imbalanced datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fe1899cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T00:30:52.105055Z",
     "iopub.status.busy": "2024-11-01T00:30:52.104661Z",
     "iopub.status.idle": "2024-11-01T00:30:52.326143Z",
     "shell.execute_reply": "2024-11-01T00:30:52.325250Z"
    },
    "papermill": {
     "duration": 1.287352,
     "end_time": "2024-11-01T00:30:52.328183",
     "exception": false,
     "start_time": "2024-11-01T00:30:51.040831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 4. Plot Confusion Matrix\n",
    "# Compute the confusion matrix based on true and predicted labels\n",
    "conf_matrix = confusion_matrix(y_true, y_pred)\n",
    "plt.figure(figsize=(8, 6))\n",
    "# Plot the confusion matrix as a heatmap for visualization\n",
    "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2451c06f",
   "metadata": {
    "papermill": {
     "duration": 1.069131,
     "end_time": "2024-11-01T00:30:54.427686",
     "exception": false,
     "start_time": "2024-11-01T00:30:53.358555",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Confusion Matrix**:\n",
    "\n",
    "The confusion matrix provides a detailed breakdown of correct and incorrect predictions across classes, helping identify where the model may be misclassifying."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "477a5715",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-01T00:30:56.584589Z",
     "iopub.status.busy": "2024-11-01T00:30:56.584176Z",
     "iopub.status.idle": "2024-11-01T00:30:56.620848Z",
     "shell.execute_reply": "2024-11-01T00:30:56.619934Z"
    },
    "papermill": {
     "duration": 1.100039,
     "end_time": "2024-11-01T00:30:56.622909",
     "exception": false,
     "start_time": "2024-11-01T00:30:55.522870",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 5. Save the Model and Additional Information\n",
    "# Ensure the directory exists where the model and information will be saved\n",
    "os.makedirs('./model', exist_ok=True)\n",
    "# Save the trained Keras model in .keras format (or .h5)\n",
    "model.save('./model/clf.keras') \n",
    "# Save additional information like model name and MAX_LEN using pickle\n",
    "with open('./model/info.pkl', 'wb') as f:\n",
    "    pickle.dump((MODEL_NAME, MAX_LEN), f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73744203",
   "metadata": {
    "papermill": {
     "duration": 1.06144,
     "end_time": "2024-11-01T00:30:58.706833",
     "exception": false,
     "start_time": "2024-11-01T00:30:57.645393",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Saving Model and Additional Info**:\n",
    "\n",
    "* The trained model is saved in the ./model directory with the extension .keras (or .h5). This allows for future reuse without retraining.\n",
    "* Additional information, like MODEL_NAME and MAX_LEN, is saved in a separate file (info.pkl) for easier model reloading and configuration matching later."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec853cb0",
   "metadata": {
    "papermill": {
     "duration": 1.099738,
     "end_time": "2024-11-01T00:31:00.849118",
     "exception": false,
     "start_time": "2024-11-01T00:30:59.749380",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Explanation of Modifications"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b909b1c",
   "metadata": {
    "papermill": {
     "duration": 1.02869,
     "end_time": "2024-11-01T00:31:02.950446",
     "exception": false,
     "start_time": "2024-11-01T00:31:01.921756",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**1. SMOTE Integration for Data Imbalance**\n",
    "* Change: I added the imblearn library and incorporated SMOTE to handle class imbalance.\n",
    "* Why: SMOTE (Synthetic Minority Over-sampling Technique) generates synthetic samples to balance the classes, improving model performance on imbalanced datasets.\n",
    "\n",
    "**2. Custom Model Architecture with DistilBERT Base Model**\n",
    "* Change: Instead of using TFDistilBertForSequenceClassification (which includes a pre-defined classification head), I initialized TFDistilBertModel directly to extract the base DistilBERT model. Then, I created a custom architecture by adding layers such as Dense, Dropout, and a Lambda layer to wrap the base model.\n",
    "* Why: This customization provides greater flexibility to adjust the architecture, like increasing the dropout rate to prevent overfitting.\n",
    "\n",
    "**3. Custom Classifier Layer and Adjusted from_logits Argument**\n",
    "* Change: I modified the classifier layer to use softmax activation with from_logits=False in the loss function.\n",
    "* Why: This change allows the model’s output to be a probability distribution directly. Setting from_logits=False ensures the loss function interprets the model’s outputs correctly as probabilities.\n",
    "\n",
    "**4. Class Weights for Handling Imbalanced Data**\n",
    "* Change: I calculated class_weights using compute_class_weight and incorporated them during model training with the class_weight parameter.\n",
    "* Why: The class weights guide the model to focus more on minority classes, balancing the effect of class imbalance during training.\n",
    "\n",
    "**5. Increased Epochs and Reduced Batch Size for Fine-Tuning**\n",
    "* Change: I increased the number of epochs from 3 to 5 and reduced the batch size to 8.\n",
    "* Why: These adjustments allow for longer training on smaller batches, which can improve learning on imbalanced or smaller datasets while stabilizing model convergence.\n",
    "\n",
    "**6. Evaluation and Plotting Metrics**\n",
    "* Change: I introduced functions to plot training metrics (accuracy and loss) and evaluate the model with confusion matrices and classification reports.\n",
    "* Why: Visualizing the training and validation metrics, as well as evaluating predictions with classification reports and confusion matrices, helps assess the model’s performance and diagnose potential overfitting.\n",
    "\n",
    "**7. Saving the Model Using .save Instead of save_pretrained**\n",
    "* Change: I used the model.save('./model/clf.keras') format for saving the custom model, instead of save_pretrained, which was incompatible with the custom Keras model.\n",
    "* Why: Custom Keras models can be saved with .h5 or .keras extensions, which are compatible with the Keras model API, allowing future loading without issues.\n",
    "\n",
    "**8. Suppression of Warnings and Info Logs**\n",
    "* Change: I set logging levels to suppress TensorFlow and Transformers warnings using logging.set_verbosity_error() and os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'.\n",
    "* Why: These additions prevent log clutter, focusing output on essential information rather than repeated warning messages.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8ba3727",
   "metadata": {
    "papermill": {
     "duration": 1.034932,
     "end_time": "2024-11-01T00:31:05.056649",
     "exception": false,
     "start_time": "2024-11-01T00:31:04.021717",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Summary of the Impact\n",
    "* **Enhanced Data Handling**: SMOTE and class weights are tailored to improve performance on imbalanced data.\n",
    "* **Improved Model Flexibility and Fine-Tuning**: Custom architecture and dropout help with overfitting, while longer training with reduced batch size can stabilize learning.\n",
    "* **Diagnostic and Usability Improvements**: Plotting, evaluation tools, and logging suppression enhance model interpretability and usability."
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 2093157,
     "sourceId": 6641062,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30775,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2907.53877,
   "end_time": "2024-11-01T00:31:09.738638",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-31T23:42:42.199868",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "01f302b8a6094271896cfb638604f253": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5a1732af17764c2ab37520b27b5b0316",
        "IPY_MODEL_4036f9b64d23443fb74d9fc223e7a9c3",
        "IPY_MODEL_c6acc11b1cc446a7ae5c887e078968b6"
       ],
       "layout": "IPY_MODEL_2c6d5ef68f164d18a102aeacdcea7dcf"
      }
     },
     "0261b82e66df49a5b853b6db738b658d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "15daa3cb0a5f452584499cc8693d2c0f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_1cbd8df4bf3a423d9c23f360f747b116",
       "placeholder": "​",
       "style": "IPY_MODEL_1f26cde2765e493b9c08b1d674bd03dd",
       "value": " 48.0/48.0 [00:00&lt;00:00, 2.52kB/s]"
      }
     },
     "16d737444ca64efba4957b787fa3bc7b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "179c2064e313453db585c7d5635b0e9e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_8da72a8d5c9d48d9b23e664e45c5db21",
       "max": 483.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_36594cb859764b4d8e1634d22d46fefe",
       "value": 483.0
      }
     },
     "1a6d2d0ac6574608aad2487daf08d5d7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1cbd8df4bf3a423d9c23f360f747b116": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1f26cde2765e493b9c08b1d674bd03dd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "2a7207dc6e454b9c971a81fb2e3bb0db": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_332ffd4a178541d0873bc834c5ce2bbc",
        "IPY_MODEL_90c36592d4364de0afbe4c0cdb0eeeeb",
        "IPY_MODEL_596f2ac9429640b09ba1260cd8fc7735"
       ],
       "layout": "IPY_MODEL_484ccbba728d4094bfb9f8ecc52328f7"
      }
     },
     "2ac609e1f72444bd9ab6a1d731340a3e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_4f35b627ea3a48b28e5aaf8b64575c5e",
       "placeholder": "​",
       "style": "IPY_MODEL_b9881ad5786d423a8a0b52530b3799ae",
       "value": " 483/483 [00:00&lt;00:00, 46.4kB/s]"
      }
     },
     "2c6d5ef68f164d18a102aeacdcea7dcf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2e4bb96161e049e98fd58c82d50f86bd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_effcc23e7bbf456087e61b157b782c4d",
        "IPY_MODEL_c413ae1490d645f3afffd324d830d241",
        "IPY_MODEL_51c8497a71ca4d3e8cfc347ac1623956"
       ],
       "layout": "IPY_MODEL_a14b643c99a2402db87f26abddce5ec6"
      }
     },
     "2e5a34b835e44e1ab83bbf949863cef7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "305306eb206e4978abcdf4c9c5a755eb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_965963fd7d74488c9e196efd2e91494f",
       "placeholder": "​",
       "style": "IPY_MODEL_72a6567c71a04664919fed862b330969",
       "value": "config.json: 100%"
      }
     },
     "32682876a60e40f89593fd28a72609ed": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "330ea32c377243c7b4e43ca895ac26d5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f1b7d2faaef64c50bd296764ffcc09eb",
        "IPY_MODEL_707ec6f0b23f4e0981b8f71f66449392",
        "IPY_MODEL_15daa3cb0a5f452584499cc8693d2c0f"
       ],
       "layout": "IPY_MODEL_1a6d2d0ac6574608aad2487daf08d5d7"
      }
     },
     "332ffd4a178541d0873bc834c5ce2bbc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_4cfae6cc0ce24171b0166bc524309fe3",
       "placeholder": "​",
       "style": "IPY_MODEL_4dab18cff89d4f5aa25855452cf7e021",
       "value": "vocab.txt: 100%"
      }
     },
     "36594cb859764b4d8e1634d22d46fefe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "3fda809da0fe4230a4e7a750d37baa5f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_305306eb206e4978abcdf4c9c5a755eb",
        "IPY_MODEL_179c2064e313453db585c7d5635b0e9e",
        "IPY_MODEL_2ac609e1f72444bd9ab6a1d731340a3e"
       ],
       "layout": "IPY_MODEL_c686df435194464a8219903d4c60a599"
      }
     },
     "40178a9cf90943e59462a5ab4d94745d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4036f9b64d23443fb74d9fc223e7a9c3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_afc126d6d6694faa93749f5e0c14d6f9",
       "max": 466062.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_72d2710c1e984150a21a080f86fc6796",
       "value": 466062.0
      }
     },
     "40f7c0db811a4e24afb441ca0fd3b4af": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "43906c31839041b5a8340e2696b56753": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "484ccbba728d4094bfb9f8ecc52328f7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4cfae6cc0ce24171b0166bc524309fe3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4dab18cff89d4f5aa25855452cf7e021": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "4f35b627ea3a48b28e5aaf8b64575c5e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "51c8497a71ca4d3e8cfc347ac1623956": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_16d737444ca64efba4957b787fa3bc7b",
       "placeholder": "​",
       "style": "IPY_MODEL_f152942c11f74c09a935bcecb78ec65e",
       "value": " 268M/268M [00:01&lt;00:00, 148MB/s]"
      }
     },
     "596f2ac9429640b09ba1260cd8fc7735": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_40f7c0db811a4e24afb441ca0fd3b4af",
       "placeholder": "​",
       "style": "IPY_MODEL_5dd28b5b1d00435db65757339c7cf2fe",
       "value": " 232k/232k [00:00&lt;00:00, 4.87MB/s]"
      }
     },
     "5a1732af17764c2ab37520b27b5b0316": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_985055783edc445a95cc2e044694b99b",
       "placeholder": "​",
       "style": "IPY_MODEL_75672df718514dd5b41281850cb83b45",
       "value": "tokenizer.json: 100%"
      }
     },
     "5dd28b5b1d00435db65757339c7cf2fe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "5eb7975fce3d42d1acc0c8d5ac0fdf0c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "707ec6f0b23f4e0981b8f71f66449392": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_83755ab06d2343f88998bbbe4c25bce0",
       "max": 48.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e62ebfaa828a484cab70702b5d809d24",
       "value": 48.0
      }
     },
     "72a6567c71a04664919fed862b330969": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "72d2710c1e984150a21a080f86fc6796": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "75672df718514dd5b41281850cb83b45": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "81d4ca498d234b0bb9e0ac3154a3aee3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "83755ab06d2343f88998bbbe4c25bce0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8da72a8d5c9d48d9b23e664e45c5db21": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "90c36592d4364de0afbe4c0cdb0eeeeb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_2e5a34b835e44e1ab83bbf949863cef7",
       "max": 231508.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a7d625017ae242d6a65ff06f71e07990",
       "value": 231508.0
      }
     },
     "965963fd7d74488c9e196efd2e91494f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "985055783edc445a95cc2e044694b99b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "98e3d93a485145fa9867f80016d17336": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a14b643c99a2402db87f26abddce5ec6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a7d625017ae242d6a65ff06f71e07990": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "afc126d6d6694faa93749f5e0c14d6f9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b9881ad5786d423a8a0b52530b3799ae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "c413ae1490d645f3afffd324d830d241": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_32682876a60e40f89593fd28a72609ed",
       "max": 267954768.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_43906c31839041b5a8340e2696b56753",
       "value": 267954768.0
      }
     },
     "c686df435194464a8219903d4c60a599": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c6acc11b1cc446a7ae5c887e078968b6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_98e3d93a485145fa9867f80016d17336",
       "placeholder": "​",
       "style": "IPY_MODEL_c71350f3618a41bc9d3fa685c4b91bd2",
       "value": " 466k/466k [00:00&lt;00:00, 5.10MB/s]"
      }
     },
     "c71350f3618a41bc9d3fa685c4b91bd2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "e62ebfaa828a484cab70702b5d809d24": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "effcc23e7bbf456087e61b157b782c4d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_5eb7975fce3d42d1acc0c8d5ac0fdf0c",
       "placeholder": "​",
       "style": "IPY_MODEL_0261b82e66df49a5b853b6db738b658d",
       "value": "model.safetensors: 100%"
      }
     },
     "f152942c11f74c09a935bcecb78ec65e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "f1b7d2faaef64c50bd296764ffcc09eb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_40178a9cf90943e59462a5ab4d94745d",
       "placeholder": "​",
       "style": "IPY_MODEL_81d4ca498d234b0bb9e0ac3154a3aee3",
       "value": "tokenizer_config.json: 100%"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
