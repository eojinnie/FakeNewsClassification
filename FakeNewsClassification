{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":6641062,"sourceType":"datasetVersion","datasetId":2093157}],"dockerImageVersionId":30775,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"%%capture\n!python3 -m venv venv\n!source venv/bin/activate\n!pip install tensorflow transformers\n\n!pip install imbalanced-learn","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-21T06:33:18.838729Z","iopub.execute_input":"2024-10-21T06:33:18.839013Z","iopub.status.idle":"2024-10-21T06:33:46.315440Z","shell.execute_reply.started":"2024-10-21T06:33:18.838975Z","shell.execute_reply":"2024-10-21T06:33:46.314335Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport tensorflow as tf\nfrom transformers import TFDistilBertModel, DistilBertTokenizer, TFDistilBertForSequenceClassification\nimport pickle\n\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.utils.class_weight import compute_class_weight\nimport numpy as np\n\nfrom tensorflow.keras.layers import Dropout, Input, Dense, Lambda\nfrom tensorflow.keras.models import Model\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-21T06:33:46.317057Z","iopub.execute_input":"2024-10-21T06:33:46.317358Z","iopub.status.idle":"2024-10-21T06:33:53.189267Z","shell.execute_reply.started":"2024-10-21T06:33:46.317326Z","shell.execute_reply":"2024-10-21T06:33:53.188451Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/fake-news-classification/WELFake_Dataset.csv\")\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-21T06:33:53.190360Z","iopub.execute_input":"2024-10-21T06:33:53.191012Z","iopub.status.idle":"2024-10-21T06:33:56.069688Z","shell.execute_reply.started":"2024-10-21T06:33:53.190977Z","shell.execute_reply":"2024-10-21T06:33:56.068590Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0                                              title  \\\n0           0  LAW ENFORCEMENT ON HIGH ALERT Following Threat...   \n1           1                                                NaN   \n2           2  UNBELIEVABLE! OBAMA’S ATTORNEY GENERAL SAYS MO...   \n3           3  Bobby Jindal, raised Hindu, uses story of Chri...   \n4           4  SATAN 2: Russia unvelis an image of its terrif...   \n\n                                                text  label  \n0  No comment is expected from Barack Obama Membe...      1  \n1     Did they post their votes for Hillary already?      1  \n2   Now, most of the demonstrators gathered last ...      1  \n3  A dozen politically active pastors came here f...      0  \n4  The RS-28 Sarmat missile, dubbed Satan 2, will...      1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>title</th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>LAW ENFORCEMENT ON HIGH ALERT Following Threat...</td>\n      <td>No comment is expected from Barack Obama Membe...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>NaN</td>\n      <td>Did they post their votes for Hillary already?</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>UNBELIEVABLE! OBAMA’S ATTORNEY GENERAL SAYS MO...</td>\n      <td>Now, most of the demonstrators gathered last ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>Bobby Jindal, raised Hindu, uses story of Chri...</td>\n      <td>A dozen politically active pastors came here f...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>SATAN 2: Russia unvelis an image of its terrif...</td>\n      <td>The RS-28 Sarmat missile, dubbed Satan 2, will...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df['label'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-10-21T06:33:56.072327Z","iopub.execute_input":"2024-10-21T06:33:56.072767Z","iopub.status.idle":"2024-10-21T06:33:56.081895Z","shell.execute_reply.started":"2024-10-21T06:33:56.072731Z","shell.execute_reply":"2024-10-21T06:33:56.080765Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"label\n1    37106\n0    35028\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"x = list(df['text'])\ny = list(df['label'])","metadata":{"execution":{"iopub.status.busy":"2024-10-21T06:33:56.083208Z","iopub.execute_input":"2024-10-21T06:33:56.083537Z","iopub.status.idle":"2024-10-21T06:33:56.113762Z","shell.execute_reply.started":"2024-10-21T06:33:56.083506Z","shell.execute_reply":"2024-10-21T06:33:56.112742Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"MODEL_NAME = 'distilbert-base-uncased'\nMAX_LEN = 100\n\nreview = x[0]\n\n# Initialize tokenizer\ntokenizer = DistilBertTokenizer.from_pretrained(MODEL_NAME)\n\ninputs = tokenizer(review, max_length=MAX_LEN, truncation=True, padding=True)\n\nprint(f'review: \\'{review}\\'')\nprint(f'input ids: {inputs[\"input_ids\"]}')\nprint(f'attention mask: {inputs[\"attention_mask\"]}')","metadata":{"execution":{"iopub.status.busy":"2024-10-21T06:33:56.115027Z","iopub.execute_input":"2024-10-21T06:33:56.115370Z","iopub.status.idle":"2024-10-21T06:33:56.691186Z","shell.execute_reply.started":"2024-10-21T06:33:56.115323Z","shell.execute_reply":"2024-10-21T06:33:56.690239Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"review: 'No comment is expected from Barack Obama Members of the #FYF911 or #FukYoFlag and #BlackLivesMatter movements called for the lynching and hanging of white people and cops. They encouraged others on a radio show Tuesday night to  turn the tide  and kill white people and cops to send a message about the killing of black people in America.One of the F***YoFlag organizers is called  Sunshine.  She has a radio blog show hosted from Texas called,  Sunshine s F***ing Opinion Radio Show. A snapshot of her #FYF911 @LOLatWhiteFear Twitter page at 9:53 p.m. shows that she was urging supporters to  Call now!! #fyf911 tonight we continue to dismantle the illusion of white Below is a SNAPSHOT Twitter Radio Call Invite   #FYF911The radio show aired at 10:00 p.m. eastern standard time.During the show, callers clearly call for  lynching  and  killing  of white people.A 2:39 minute clip from the radio show can be heard here. It was provided to Breitbart Texas by someone who would like to be referred to as  Hannibal.  He has already received death threats as a result of interrupting #FYF911 conference calls.An unidentified black man said  when those mother f**kers are by themselves, that s when when we should start f***ing them up. Like they do us, when a bunch of them ni**ers takin  one of us out, that s how we should roll up.  He said,  Cause we already roll up in gangs anyway. There should be six or seven black mother f**ckers, see that white person, and then lynch their ass. Let s turn the tables. They conspired that if  cops started losing people,  then  there will be a state of emergency. He speculated that one of two things would happen,  a big-ass [R s?????] war,  or  ni**ers, they are going to start backin  up. We are already getting killed out here so what the f**k we got to lose? Sunshine could be heard saying,  Yep, that s true. That s so f**king true. He said,  We need to turn the tables on them. Our kids are getting shot out here. Somebody needs to become a sacrifice on their side.He said,  Everybody ain t down for that s**t, or whatever, but like I say, everybody has a different position of war.  He continued,  Because they don t give a f**k anyway.  He said again,  We might as well utilized them for that s**t and turn the tables on these n**ers. He said, that way  we can start lookin  like we ain t havin  that many casualties, and there can be more causalities on their side instead of ours. They are out their killing black people, black lives don t matter, that s what those mother f**kers   so we got to make it matter to them. Find a mother f**ker that is alone. Snap his ass, and then f***in hang him from a damn tree. Take a picture of it and then send it to the mother f**kers. We  just need one example,  and  then people will start watchin .  This will turn the tables on s**t, he said. He said this will start  a trickle-down effect.  He said that when one white person is hung and then they are just  flat-hanging,  that will start the  trickle-down effect.  He continued,  Black people are good at starting trends. He said that was how  to get the upper-hand. Another black man spoke up saying they needed to kill  cops that are killing us. The first black male said,  That will be the best method right there. Breitbart Texas previously reported how Sunshine was upset when  racist white people  infiltrated and disrupted one of her conference calls. She subsequently released the phone number of one of the infiltrators. The veteran immediately started receiving threatening calls.One of the #F***YoFlag movement supporters allegedly told a veteran who infiltrated their publicly posted conference call,  We are going to rape and gut your pregnant wife, and your f***ing piece of sh*t unborn creature will be hung from a tree. Breitbart Texas previously encountered Sunshine at a Sandra Bland protest at the Waller County Jail in Texas, where she said all white people should be killed. She told journalists and photographers,  You see this nappy-ass hair on my head?   That means I am one of those more militant Negroes.  She said she was at the protest because  these redneck mother-f**kers murdered Sandra Bland because she had nappy hair like me. #FYF911 black radicals say they will be holding the  imperial powers  that are actually responsible for the terrorist attacks on September 11th accountable on that day, as reported by Breitbart Texas. There are several websites and Twitter handles for the movement. Palmetto Star  describes himself as one of the head organizers. He said in a YouTube video that supporters will be burning their symbols of  the illusion of their superiority,  their  false white supremacy,  like the American flag, the British flag, police uniforms, and Ku Klux Klan hoods.Sierra McGrone or  Nocturnus Libertus  posted,  you too can help a young Afrikan clean their a** with the rag of oppression.  She posted two photos, one that appears to be herself, and a photo of a black man, wiping their naked butts with the American flag.For entire story: Breitbart News'\ninput ids: [101, 2053, 7615, 2003, 3517, 2013, 13857, 8112, 2372, 1997, 1996, 1001, 1042, 2100, 2546, 2683, 14526, 2030, 1001, 11865, 4801, 11253, 17802, 1998, 1001, 2304, 3669, 6961, 18900, 3334, 5750, 2170, 2005, 1996, 11404, 2075, 1998, 5689, 1997, 2317, 2111, 1998, 10558, 1012, 2027, 6628, 2500, 2006, 1037, 2557, 2265, 9857, 2305, 2000, 2735, 1996, 10401, 1998, 3102, 2317, 2111, 1998, 10558, 2000, 4604, 1037, 4471, 2055, 1996, 4288, 1997, 2304, 2111, 1999, 2637, 1012, 2028, 1997, 1996, 1042, 1008, 1008, 1008, 10930, 10258, 8490, 18829, 2003, 2170, 9609, 1012, 2016, 2038, 1037, 2557, 9927, 2265, 4354, 2013, 102]\nattention mask: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Define Model","metadata":{}},{"cell_type":"code","source":"# Define helper functions for encoding and constructing the dataset\ndef construct_encodings(x, tokenizer, max_len, trucation=True, padding=True):\n    return tokenizer(x, max_length=max_len, truncation=trucation, padding=padding)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T06:33:56.692234Z","iopub.execute_input":"2024-10-21T06:33:56.692526Z","iopub.status.idle":"2024-10-21T06:33:56.697448Z","shell.execute_reply.started":"2024-10-21T06:33:56.692495Z","shell.execute_reply":"2024-10-21T06:33:56.696503Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"x = [str(item) for item in x]","metadata":{"execution":{"iopub.status.busy":"2024-10-21T06:33:56.698557Z","iopub.execute_input":"2024-10-21T06:33:56.699683Z","iopub.status.idle":"2024-10-21T06:33:56.722696Z","shell.execute_reply.started":"2024-10-21T06:33:56.699637Z","shell.execute_reply":"2024-10-21T06:33:56.721830Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"from imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\n\nencodings = construct_encodings(x, tokenizer, max_len=MAX_LEN)\n#below: SMOTE\nTEST_SPLIT = 0.3  # Define the test split ratio\nBATCH_SIZE = 8\n\ninput_ids = encodings['input_ids']\nattention_masks = encodings['attention_mask']\n\n# Split the data into training and testing sets\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test, masks_train, masks_test = train_test_split(\n    input_ids, y, attention_masks, test_size=TEST_SPLIT, random_state=42, stratify=y\n)\n\n# Apply SMOTE to the training data only\nsmote = SMOTE(random_state=42)\nx_train_resampled, y_train_resampled = smote.fit_resample(x_train, y_train)\n\n# Adjust attention masks for the new samples generated by SMOTE\n# Note: SMOTE only generates synthetic samples based on input features. We'll copy masks for simplicity.\nmasks_train_resampled = np.repeat(masks_train, np.ceil(len(x_train_resampled) / len(masks_train)).astype(int), axis=0)[:len(x_train_resampled)]\n\n# Reconstruct the encodings with resampled data\ntrain_encodings = {'input_ids': x_train_resampled, 'attention_mask': masks_train_resampled}\ntest_encodings = {'input_ids': x_test, 'attention_mask': masks_test}\n","metadata":{"execution":{"iopub.status.busy":"2024-10-21T06:33:56.723807Z","iopub.execute_input":"2024-10-21T06:33:56.724097Z","iopub.status.idle":"2024-10-21T06:59:25.165727Z","shell.execute_reply.started":"2024-10-21T06:33:56.724066Z","shell.execute_reply":"2024-10-21T06:59:25.164858Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"**Changes:** I used SMOTE to create a more balanced training dataset.","metadata":{}},{"cell_type":"code","source":"def construct_tfdataset(encodings, y=None):\n#     if y:\n#         return tf.data.Dataset.from_tensor_slices((dict(encodings),y))\n#     else:\n#         # this case is used when making predictions on unseen samples after training\n#         return tf.data.Dataset.from_tensor_slices(dict(encodings))\n    if y is not None:\n        return tf.data.Dataset.from_tensor_slices((dict(encodings), y))\n    else:\n        return tf.data.Dataset.from_tensor_slices(dict(encodings))","metadata":{"execution":{"iopub.status.busy":"2024-10-21T06:59:25.167001Z","iopub.execute_input":"2024-10-21T06:59:25.167640Z","iopub.status.idle":"2024-10-21T06:59:25.173122Z","shell.execute_reply.started":"2024-10-21T06:59:25.167604Z","shell.execute_reply":"2024-10-21T06:59:25.172178Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":"**Changes:** I updated construct_tfdataset function.(SMOTE)\n\n","metadata":{}},{"cell_type":"code","source":"# Create TensorFlow datasets\n# tfdataset = construct_tfdataset(encodings,y) SMOTE\n\ntfdataset_train = construct_tfdataset(train_encodings, y_train_resampled).batch(BATCH_SIZE)\ntfdataset_test = construct_tfdataset(test_encodings, y_test).batch(BATCH_SIZE)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T06:59:25.174180Z","iopub.execute_input":"2024-10-21T06:59:25.174465Z","iopub.status.idle":"2024-10-21T06:59:54.692161Z","shell.execute_reply.started":"2024-10-21T06:59:25.174434Z","shell.execute_reply":"2024-10-21T06:59:54.691115Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":"# Train and evaluate","metadata":{}},{"cell_type":"code","source":"# TEST_SPLIT = 0.3\n# BATCH_SIZE = 16 \n\n# train_size = int(len(x) * (1-TEST_SPLIT))\n\n# tfdataset = tfdataset.shuffle(len(x))\n# tfdataset_train = tfdataset.take(train_size)\n# tfdataset_test = tfdataset.skip(train_size)\n\n# tfdataset_train = tfdataset_train.batch(BATCH_SIZE)\n# tfdataset_test = tfdataset_test.batch(BATCH_SIZE)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T06:59:54.693662Z","iopub.execute_input":"2024-10-21T06:59:54.694071Z","iopub.status.idle":"2024-10-21T06:59:54.698501Z","shell.execute_reply.started":"2024-10-21T06:59:54.694025Z","shell.execute_reply":"2024-10-21T06:59:54.697425Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":"**Changes:** I changed nepochs from 5 to 16.\n\n* Increased batch size for better GPU utilization SMOTE","metadata":{}},{"cell_type":"code","source":"# Define model parameters\nN_EPOCHS = 5\nDROPOUT_RATE = 0.3\n\n# Load the pre-trained DistilBERT base model (without classification head)\nbase_model = TFDistilBertModel.from_pretrained(MODEL_NAME)\n\n# Define input layers\ninput_ids = Input(shape=(MAX_LEN,), dtype=tf.int32, name=\"input_ids\")\nattention_mask = Input(shape=(MAX_LEN,), dtype=tf.int32, name=\"attention_mask\")\n\n# Wrap the base model call in a Lambda layer to ensure compatibility\ndistilbert_output = Lambda(\n    lambda x: base_model(x[0], attention_mask=x[1])[0],  # Extract the last hidden state directly\n    output_shape=(MAX_LEN, base_model.config.hidden_size)\n)([input_ids, attention_mask])\n\n# Extract the [CLS] token's hidden state\nhidden_state = distilbert_output[:, 0, :]  # Extract the first token ([CLS]) representation\n\n# Apply dropout with a higher rate (e.g., 0.3 or 0.5)\ndropout = Dropout(DROPOUT_RATE)(hidden_state)\n\n# Output layer for classification (binary classification, so one Dense layer with 2 units)\noutput = Dense(2, activation='softmax')(dropout)\n\n# Create the new model\nmodel = Model(inputs=[input_ids, attention_mask], outputs=output)\noptimizer = tf.keras.optimizers.Adam(learning_rate=1e-5, clipnorm=1.0)\n# Compile model with the optimizer\nmodel.compile(optimizer=optimizer, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])\n\n# 5. Print model summary to see the updated architecture\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-10-21T06:59:54.702503Z","iopub.execute_input":"2024-10-21T06:59:54.702834Z","iopub.status.idle":"2024-10-21T06:59:56.022488Z","shell.execute_reply.started":"2024-10-21T06:59:54.702793Z","shell.execute_reply":"2024-10-21T06:59:56.021592Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stderr","text":"Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFDistilBertModel: ['vocab_layer_norm.bias', 'vocab_layer_norm.weight', 'vocab_projector.bias', 'vocab_transform.weight', 'vocab_transform.bias']\n- This IS expected if you are initializing TFDistilBertModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n- This IS NOT expected if you are initializing TFDistilBertModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\nAll the weights of TFDistilBertModel were initialized from the PyTorch model.\nIf your task is similar to the task the model of the checkpoint was trained on, you can already use TFDistilBertModel for predictions without further training.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ input_ids           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ attention_mask      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ lambda (\u001b[38;5;33mLambda\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m768\u001b[0m)  │          \u001b[38;5;34m0\u001b[0m │ input_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],  │\n│                     │                   │            │ attention_mask[\u001b[38;5;34m0\u001b[0m… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item (\u001b[38;5;33mGetItem\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m768\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ lambda[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]      │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m768\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ get_item[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)         │      \u001b[38;5;34m1,538\u001b[0m │ dropout[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ input_ids           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ attention_mask      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ lambda (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Lambda</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ input_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],  │\n│                     │                   │            │ attention_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ get_item (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ lambda[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]      │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ get_item[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)         │      <span style=\"color: #00af00; text-decoration-color: #00af00\">1,538</span> │ dropout[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,538\u001b[0m (6.01 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,538</span> (6.01 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,538\u001b[0m (6.01 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,538</span> (6.01 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"markdown","source":"**Changes:** I added Gradient Clipping(clipnorm=1.0) and increased dropout rate to resolve overfitting\n\n* Gradient clipping ensures that updates to model weights don’t become too large, maintaining stability during training.\n* Track F1-score and precision/recall to ensure balanced performance. The classification report shows data imbalance so added this to monitor.\n* I added a Dropout layer with a rate of 0.3 after the DistilBERT output. This change aims to reduce overfitting by randomly deactivating 30% of neurons during training, which can help the model generalize better to new data.","metadata":{}},{"cell_type":"code","source":"# Calculate class weights\nclass_weights = compute_class_weight(\n    class_weight='balanced',\n    classes=np.unique(y),\n    y=y\n)\nclass_weights_dict = dict(enumerate(class_weights))\nprint(\"Class Weights:\", class_weights_dict)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T06:59:56.023802Z","iopub.execute_input":"2024-10-21T06:59:56.024186Z","iopub.status.idle":"2024-10-21T06:59:56.047589Z","shell.execute_reply.started":"2024-10-21T06:59:56.024142Z","shell.execute_reply":"2024-10-21T06:59:56.046556Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"Class Weights: {0: 1.029661984697956, 1: 0.971999137605778}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Changes:** I added class weights to address data imbalance.\n\n* Class weights help to give more importance to the minority class during training, which balances out the learning process.\n* This method is suitable because it integrates well with the model.fit() method of Keras without needing to change the structure of the dataset.","metadata":{}},{"cell_type":"code","source":"# # Define callbacks\n# # Train the model with early stopping\n# early_stopping = EarlyStopping(\n#     monitor='val_loss',  # Monitor the validation loss\n#     patience=3,  # Stop training if val_loss does not improve for 3 epochs\n#     restore_best_weights=True  # Restore model weights from the best epoch\n# )\n\n# # Ensure the directory exists for saving the model\n# os.makedirs('./model', exist_ok=True)\n\n# checkpoint = ModelCheckpoint(\n#     filepath='./model/best_model.weights.h5',  # Save the best model weights to this file\n#     monitor='val_loss',  # Monitor validation loss to determine the best model\n#     save_best_only=True,  # Only save the model if the validation loss improves\n#     save_weights_only=True,  # Only save the weights\n#     verbose=1  # Print messages when saving the model\n# )","metadata":{"execution":{"iopub.status.busy":"2024-10-21T06:59:56.048633Z","iopub.execute_input":"2024-10-21T06:59:56.048963Z","iopub.status.idle":"2024-10-21T06:59:56.054258Z","shell.execute_reply.started":"2024-10-21T06:59:56.048932Z","shell.execute_reply":"2024-10-21T06:59:56.053235Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"# Train the model with the callbacks\nhistory = model.fit(\n    tfdataset_train,\n    validation_data=tfdataset_test,  # Provide validation data to monitor val_loss\n    epochs=N_EPOCHS,\n    validation_freq=1,\n    class_weight=class_weights_dict,\n)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T06:59:56.055524Z","iopub.execute_input":"2024-10-21T06:59:56.055940Z","iopub.status.idle":"2024-10-21T07:18:43.709607Z","shell.execute_reply.started":"2024-10-21T06:59:56.055897Z","shell.execute_reply":"2024-10-21T07:18:43.708638Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Epoch 1/5\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/backend/tensorflow/nn.py:602: UserWarning: \"`sparse_categorical_crossentropy` received `from_logits=True`, but the `output` argument was produced by a Softmax activation and thus does not represent logits. Was this intended?\n  output, from_logits = _get_logits(\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1729494002.316769     515 service.cc:145] XLA service 0x7df7100304e0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1729494002.316817     515 service.cc:153]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\nI0000 00:00:1729494002.316821     515 service.cc:153]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\nW0000 00:00:1729494002.550413     515 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1729494005.392176     546 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'triton_gemm_dot_1', 8 bytes spill stores, 8 bytes spill loads\n\nI0000 00:00:1729494010.203735     546 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'triton_gemm_dot_1', 1256 bytes spill stores, 1212 bytes spill loads\n\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m   7/6494\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m2:19\u001b[0m 22ms/step - accuracy: 0.3907 - loss: 1.1531  ","output_type":"stream"},{"name":"stderr","text":"I0000 00:00:1729494012.066560     515 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m6491/6494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.5943 - loss: 0.7095","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1729494159.580399     513 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\nI0000 00:00:1729494166.946486     567 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'triton_gemm_dot_1', 1256 bytes spill stores, 1212 bytes spill loads\n\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m6494/6494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step - accuracy: 0.5944 - loss: 0.7094","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1729494170.342434     514 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\nW0000 00:00:1729494235.951910     512 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\nI0000 00:00:1729494243.859669     598 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'triton_gemm_dot_14', 1096 bytes spill stores, 1084 bytes spill loads\n\nI0000 00:00:1729494245.938446     595 asm_compiler.cc:369] ptxas warning : Registers are spilled to local memory in function 'triton_gemm_dot', 1312 bytes spill stores, 1312 bytes spill loads\n\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m6494/6494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m251s\u001b[0m 36ms/step - accuracy: 0.5944 - loss: 0.7094 - val_accuracy: 0.7620 - val_loss: 0.5166\nEpoch 2/5\n\u001b[1m6494/6494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m219s\u001b[0m 34ms/step - accuracy: 0.7756 - loss: 0.4921 - val_accuracy: 0.7973 - val_loss: 0.4491\nEpoch 3/5\n\u001b[1m6494/6494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m219s\u001b[0m 34ms/step - accuracy: 0.8062 - loss: 0.4340 - val_accuracy: 0.8109 - val_loss: 0.4162\nEpoch 4/5\n\u001b[1m6494/6494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m219s\u001b[0m 34ms/step - accuracy: 0.8226 - loss: 0.4028 - val_accuracy: 0.8200 - val_loss: 0.3965\nEpoch 5/5\n\u001b[1m6494/6494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m219s\u001b[0m 34ms/step - accuracy: 0.8273 - loss: 0.3843 - val_accuracy: 0.8265 - val_loss: 0.3823\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# **Changes:** I added validation_freq=1\n* By default, model.fit() validates at the end of each epoch, but you can adjust this to validate more frequently to keep a closer eye on validation performance.\n","metadata":{}},{"cell_type":"code","source":"benchmarks = model.evaluate(tfdataset_test, return_dict=True, batch_size=BATCH_SIZE)\nprint(benchmarks)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T07:18:43.710848Z","iopub.execute_input":"2024-10-21T07:18:43.711855Z","iopub.status.idle":"2024-10-21T07:19:47.990882Z","shell.execute_reply.started":"2024-10-21T07:18:43.711819Z","shell.execute_reply":"2024-10-21T07:19:47.989905Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"\u001b[1m2706/2706\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m64s\u001b[0m 24ms/step - accuracy: 0.8280 - loss: 0.3854\n{'accuracy': 0.8264867663383484, 'loss': 0.3823360502719879}\n","output_type":"stream"}]},{"cell_type":"code","source":"def create_predictor(model, model_name, max_len):\n  tkzr = DistilBertTokenizer.from_pretrained(model_name)\n  def predict_proba(text):\n      x = [text]\n\n      encodings = construct_encodings(x, tkzr, max_len=max_len)\n      tfdataset = construct_tfdataset(encodings)\n      tfdataset = tfdataset.batch(1)\n\n      preds = model.predict(tfdataset).logits\n      preds = activations.softmax(tf.convert_to_tensor(preds)).numpy()\n      return preds[0][0]\n    \n  return predict_proba\n\nclf = create_predictor(model, MODEL_NAME, MAX_LEN)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T07:19:47.992447Z","iopub.execute_input":"2024-10-21T07:19:47.993352Z","iopub.status.idle":"2024-10-21T07:19:48.160209Z","shell.execute_reply.started":"2024-10-21T07:19:47.993305Z","shell.execute_reply":"2024-10-21T07:19:48.159153Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**The code below is what I added since the original code didn’t include any visualization. I referred to the second reference code (BERT model) since it had a lot of visualizations. I’ve added things like the confusion matrix and classification report.**","metadata":{}},{"cell_type":"code","source":"# 1. Plot Training/Validation Loss and Accuracy\ndef plot_metrics(history):\n    plt.figure(figsize=(12, 5))\n    # Plot accuracy\n    plt.subplot(1, 2, 1)\n    plt.plot(history.history['accuracy'], label='Train Accuracy')\n    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.title('Training and Validation Accuracy')\n    plt.legend()\n\n    # Plot loss\n    plt.subplot(1, 2, 2)\n    plt.plot(history.history['loss'], label='Train Loss')\n    plt.plot(history.history['val_loss'], label='Validation Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.title('Training and Validation Loss')\n    plt.legend()\n\n    plt.show()\n\nplot_metrics(history)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T07:19:48.161441Z","iopub.execute_input":"2024-10-21T07:19:48.161772Z","iopub.status.idle":"2024-10-21T07:19:48.721586Z","shell.execute_reply.started":"2024-10-21T07:19:48.161738Z","shell.execute_reply":"2024-10-21T07:19:48.720641Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":"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1lL81vP0cyjP+C8012tE/xLZ7Xbq1KlTru8ZHBzskV/cUxS/tRS/tRS/tRT/aRrJLz/K9WdS/NZS/NZS/Nbz9HMor/gvJNfr534RERERERERL6JCX0RERERERMSLqNB3A/7+/owfPx5/f3+rQ7kkit9ait9ait9ail88haf/XSt+ayl+ayl+63n6OVgRvxbjExEREREREfEiGtEXERERERER8SIq9EVERERERES8iAp9ERERERERES+iQl9ERERERETEi6jQryRTpkwhPj6egIAAEhISWL58+Xn3//jjj2nWrBkBAQG0bt2ab775ppIiPbuLiX/GjBnYbLYyLSAgoBKjLWvhwoVcf/31xMTEYLPZmDNnzh8e89NPP9GhQwf8/f1p1KgRM2bMqPA4z+Vi4//pp5/OuP42m43MzMzKCfg3JkyYQOfOnalRowYREREMHDiQzZs3/+Fx7vL9v5T43en7/9prr9GmTRuCg4MJDg4mMTGRb7/99rzHuMu1h4uP352u/dlMnDgRm83Gww8/fN793OnvQC6Ocr1y/aVSrrf2+698r3xfXtwp16vQrwSzZs0iOTmZ8ePHs2rVKtq2bUu/fv04cODAWfdfsmQJt912GyNHjmT16tUMHDiQgQMHsn79+kqO3HSx8QMEBwezf/9+V9u9e3clRlxWfn4+bdu2ZcqUKRe0/86dOxkwYABXXHEFaWlpPPzww/z5z3/mu+++q+BIz+5i4z9l8+bNZf4OIiIiKijCc1uwYAGjRo1i6dKlzJs3j+LiYq6++mry8/PPeYw7ff8vJX5wn+9/nTp1mDhxIitXruSXX37hyiuv5MYbb+TXX3896/7udO3h4uMH97n2v7dixQpef/112rRpc9793O3vQC6ccr1y/eVQrrf2+698r3xfHtwu1xtS4bp06WKMGjXK9bq0tNSIiYkxJkyYcNb9b7nlFmPAgAFl+hISEoy//OUvFRrnuVxs/G+99ZYREhJSSdFdHMCYPXv2efd59NFHjZYtW5bpu/XWW41+/fpVYGQX5kLi//HHHw3AOHr0aKXEdDEOHDhgAMaCBQvOuY+7ff9/60Lid+fvv2EYRq1atYz//e9/Z93mztf+lPPF767XPi8vz2jcuLExb948o3fv3sbo0aPPua8n/B3I2SnXuw/lemt5eq43DOV7d+Bp+d4dc71G9CtYUVERK1eu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vaxbt44vvviCRo0alfmMp59+mltuuYW1a9dy7bXXMnToUI4cOVKp5ykiIlKVKd+LuClDROQiDR8+3HA4HEZQUFCZ9n//93+GYRgGYNx3331ljklISDDuv/9+wzAM44033jBq1aplHDt2zLX966+/Nux2u5GZmWkYhmHExMQYf//7388ZA2D84x//cL0+duyYARjffvttuZ2niIhIVaZ8L+K5dI++iFySK664gtdee61MX2hoqOvPiYmJZbYlJiaSlpYGwMaNG2nbti1BQUGu7d27d8fpdLJ582ZsNhv79u2jb9++542hTZs2rj8HBQURHBzMgQMHLvWURERE5HeU70U8kwp9EbkkQUFBZ0ytKy/VqlW7oP18fX3LvLbZbDidzooISUREpEpSvhfxTLpHX0QqxNKlS8943bx5cwCaN2/OmjVryM/Pd21fvHgxdrudpk2bUqNGDeLj40lJSanUmEVEROTiKN+LuCeN6IvIJSksLCQzM7NMn4+PD+Hh4QB8/PHHdOrUiR49evD++++zfPlypk2bBsDQoUMZP348w4cP56mnnuLgwYM89NBD3HnnnURGRgLw1FNPcd999xEREcE111xDXl4eixcv5qGHHqrcExUREanClO9FPJMKfRG5JHPnziU6OrpMX9OmTdm0aRNgrpA7c+ZMHnjgAaKjo/nwww9p0aIFAIGBgXz33XeMHj2azp07ExgYyODBg5k0aZLrvYYPH05BQQEvvvgiY8eOJTw8nJtuuqnyTlBERESU70U8lM0wDMPqIETEu9hsNmbPns3AgQOtDkVEREQqiPK9iPvSPfoiIiIiIiIiXkSFvoiIiIiIiIgX0dR9ERERERERES+iEX0RERERERERL6JCX0RERERERMSLqNAXERERERER8SIq9EVERERERES8iAp9ERERERERES+iQl9ERERERETEi6jQFxEREREREfEiKvRFREREREREvMj/B1jfEFIHC1CrAAAAAElFTkSuQmCC"},"metadata":{}}]},{"cell_type":"code","source":"# 2. Evaluate and Generate Predictions\ny_pred_probs = model.predict(tfdataset_test)\ny_pred = tf.argmax(y_pred_probs, axis=1).numpy()","metadata":{"execution":{"iopub.status.busy":"2024-10-21T07:19:48.722892Z","iopub.execute_input":"2024-10-21T07:19:48.723248Z","iopub.status.idle":"2024-10-21T07:20:58.491835Z","shell.execute_reply.started":"2024-10-21T07:19:48.723212Z","shell.execute_reply":"2024-10-21T07:20:58.490967Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stderr","text":"W0000 00:00:1729495189.722528     513 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m2704/2706\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 24ms/step","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1729495255.956174     514 assert_op.cc:38] Ignoring Assert operator functional_1_1/lambda_1/tf_distil_bert_model/distilbert/embeddings/assert_less/Assert/Assert\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m2706/2706\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m68s\u001b[0m 25ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"# Get true labels\ny_true = []\nfor _, labels in tfdataset_test.unbatch():\n    y_true.append(labels.numpy())\ny_true = tf.convert_to_tensor(y_true).numpy()","metadata":{"execution":{"iopub.status.busy":"2024-10-21T07:20:58.492992Z","iopub.execute_input":"2024-10-21T07:20:58.493290Z","iopub.status.idle":"2024-10-21T07:21:04.344293Z","shell.execute_reply.started":"2024-10-21T07:20:58.493260Z","shell.execute_reply":"2024-10-21T07:21:04.343464Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"# 3. Print Classification Report\nprint(\"Classification Report:\")\nprint(classification_report(y_true, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-10-21T07:21:04.345356Z","iopub.execute_input":"2024-10-21T07:21:04.345646Z","iopub.status.idle":"2024-10-21T07:21:04.398319Z","shell.execute_reply.started":"2024-10-21T07:21:04.345616Z","shell.execute_reply":"2024-10-21T07:21:04.397298Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.79      0.88      0.83     10509\n           1       0.87      0.78      0.82     11132\n\n    accuracy                           0.83     21641\n   macro avg       0.83      0.83      0.83     21641\nweighted avg       0.83      0.83      0.83     21641\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# 4. Plot Confusion Matrix\nconf_matrix = confusion_matrix(y_true, y_pred)\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-21T07:21:04.399503Z","iopub.execute_input":"2024-10-21T07:21:04.399840Z","iopub.status.idle":"2024-10-21T07:21:04.695919Z","shell.execute_reply.started":"2024-10-21T07:21:04.399806Z","shell.execute_reply":"2024-10-21T07:21:04.695010Z"},"trusted":true},"execution_count":23,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import os\n\n# Ensure the directory exists for saving the model\nos.makedirs('./model', exist_ok=True)\n# Save the Keras model with a proper extension.\nmodel.save('./model/clf.keras') # Use .keras or .h5 as the file extension.\n# Save additional information like model name and MAX_LEN using pickle.\nwith open('./model/info.pkl', 'wb') as f:\n    pickle.dump((MODEL_NAME, MAX_LEN), f)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T07:21:04.696819Z","iopub.execute_input":"2024-10-21T07:21:04.697126Z","iopub.status.idle":"2024-10-21T07:21:04.733343Z","shell.execute_reply.started":"2024-10-21T07:21:04.697094Z","shell.execute_reply":"2024-10-21T07:21:04.732131Z"},"trusted":true},"execution_count":24,"outputs":[]}]}