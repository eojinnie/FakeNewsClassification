{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":6641062,"sourceType":"datasetVersion","datasetId":2093157}],"dockerImageVersionId":30775,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"%%capture\n!python3 -m venv venv\n!source venv/bin/activate\n!pip install tensorflow==2.11.0 transformers==4.28.0","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-19T00:20:19.121869Z","iopub.execute_input":"2024-10-19T00:20:19.122556Z","iopub.status.idle":"2024-10-19T00:20:35.565967Z","shell.execute_reply.started":"2024-10-19T00:20:19.122512Z","shell.execute_reply":"2024-10-19T00:20:35.564529Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport tensorflow as tf\n#from tensorflow.keras import activations, losses\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n#from tensorflow.keras.optimizers import Adam\nfrom transformers import DistilBertTokenizer, TFDistilBertForSequenceClassification, create_optimizer \nimport pickle\nimport os\n\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-10-19T00:20:35.569215Z","iopub.execute_input":"2024-10-19T00:20:35.570180Z","iopub.status.idle":"2024-10-19T00:20:35.576658Z","shell.execute_reply.started":"2024-10-19T00:20:35.570130Z","shell.execute_reply":"2024-10-19T00:20:35.575529Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/fake-news-classification/WELFake_Dataset.csv\")\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-19T00:20:35.577696Z","iopub.execute_input":"2024-10-19T00:20:35.578026Z","iopub.status.idle":"2024-10-19T00:20:38.437593Z","shell.execute_reply.started":"2024-10-19T00:20:35.577996Z","shell.execute_reply":"2024-10-19T00:20:38.436533Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0                                              title  \\\n0           0  LAW ENFORCEMENT ON HIGH ALERT Following Threat...   \n1           1                                                NaN   \n2           2  UNBELIEVABLE! OBAMA’S ATTORNEY GENERAL SAYS MO...   \n3           3  Bobby Jindal, raised Hindu, uses story of Chri...   \n4           4  SATAN 2: Russia unvelis an image of its terrif...   \n\n                                                text  label  \n0  No comment is expected from Barack Obama Membe...      1  \n1     Did they post their votes for Hillary already?      1  \n2   Now, most of the demonstrators gathered last ...      1  \n3  A dozen politically active pastors came here f...      0  \n4  The RS-28 Sarmat missile, dubbed Satan 2, will...      1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>title</th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>LAW ENFORCEMENT ON HIGH ALERT Following Threat...</td>\n      <td>No comment is expected from Barack Obama Membe...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>NaN</td>\n      <td>Did they post their votes for Hillary already?</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>UNBELIEVABLE! OBAMA’S ATTORNEY GENERAL SAYS MO...</td>\n      <td>Now, most of the demonstrators gathered last ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>Bobby Jindal, raised Hindu, uses story of Chri...</td>\n      <td>A dozen politically active pastors came here f...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>SATAN 2: Russia unvelis an image of its terrif...</td>\n      <td>The RS-28 Sarmat missile, dubbed Satan 2, will...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df['label'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-10-19T00:20:38.439174Z","iopub.execute_input":"2024-10-19T00:20:38.439540Z","iopub.status.idle":"2024-10-19T00:20:38.449038Z","shell.execute_reply.started":"2024-10-19T00:20:38.439505Z","shell.execute_reply":"2024-10-19T00:20:38.447955Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"label\n1    37106\n0    35028\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"x = list(df['text'])\ny = list(df['label'])","metadata":{"execution":{"iopub.status.busy":"2024-10-19T00:20:38.452113Z","iopub.execute_input":"2024-10-19T00:20:38.452540Z","iopub.status.idle":"2024-10-19T00:20:38.543560Z","shell.execute_reply.started":"2024-10-19T00:20:38.452486Z","shell.execute_reply":"2024-10-19T00:20:38.542813Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"MODEL_NAME = 'distilbert-base-uncased'\nMAX_LEN = 100\n\nreview = x[0]\n\n# Initialize tokenizer\ntokenizer = DistilBertTokenizer.from_pretrained(MODEL_NAME)\n\ninputs = tokenizer(review, max_length=MAX_LEN, truncation=True, padding=True)\n\nprint(f'review: \\'{review}\\'')\nprint(f'input ids: {inputs[\"input_ids\"]}')\nprint(f'attention mask: {inputs[\"attention_mask\"]}')","metadata":{"execution":{"iopub.status.busy":"2024-10-19T00:20:38.544615Z","iopub.execute_input":"2024-10-19T00:20:38.544920Z","iopub.status.idle":"2024-10-19T00:20:38.732162Z","shell.execute_reply.started":"2024-10-19T00:20:38.544888Z","shell.execute_reply":"2024-10-19T00:20:38.731214Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"review: 'No comment is expected from Barack Obama Members of the #FYF911 or #FukYoFlag and #BlackLivesMatter movements called for the lynching and hanging of white people and cops. They encouraged others on a radio show Tuesday night to  turn the tide  and kill white people and cops to send a message about the killing of black people in America.One of the F***YoFlag organizers is called  Sunshine.  She has a radio blog show hosted from Texas called,  Sunshine s F***ing Opinion Radio Show. A snapshot of her #FYF911 @LOLatWhiteFear Twitter page at 9:53 p.m. shows that she was urging supporters to  Call now!! #fyf911 tonight we continue to dismantle the illusion of white Below is a SNAPSHOT Twitter Radio Call Invite   #FYF911The radio show aired at 10:00 p.m. eastern standard time.During the show, callers clearly call for  lynching  and  killing  of white people.A 2:39 minute clip from the radio show can be heard here. It was provided to Breitbart Texas by someone who would like to be referred to as  Hannibal.  He has already received death threats as a result of interrupting #FYF911 conference calls.An unidentified black man said  when those mother f**kers are by themselves, that s when when we should start f***ing them up. Like they do us, when a bunch of them ni**ers takin  one of us out, that s how we should roll up.  He said,  Cause we already roll up in gangs anyway. There should be six or seven black mother f**ckers, see that white person, and then lynch their ass. Let s turn the tables. They conspired that if  cops started losing people,  then  there will be a state of emergency. He speculated that one of two things would happen,  a big-ass [R s?????] war,  or  ni**ers, they are going to start backin  up. We are already getting killed out here so what the f**k we got to lose? Sunshine could be heard saying,  Yep, that s true. That s so f**king true. He said,  We need to turn the tables on them. Our kids are getting shot out here. Somebody needs to become a sacrifice on their side.He said,  Everybody ain t down for that s**t, or whatever, but like I say, everybody has a different position of war.  He continued,  Because they don t give a f**k anyway.  He said again,  We might as well utilized them for that s**t and turn the tables on these n**ers. He said, that way  we can start lookin  like we ain t havin  that many casualties, and there can be more causalities on their side instead of ours. They are out their killing black people, black lives don t matter, that s what those mother f**kers   so we got to make it matter to them. Find a mother f**ker that is alone. Snap his ass, and then f***in hang him from a damn tree. Take a picture of it and then send it to the mother f**kers. We  just need one example,  and  then people will start watchin .  This will turn the tables on s**t, he said. He said this will start  a trickle-down effect.  He said that when one white person is hung and then they are just  flat-hanging,  that will start the  trickle-down effect.  He continued,  Black people are good at starting trends. He said that was how  to get the upper-hand. Another black man spoke up saying they needed to kill  cops that are killing us. The first black male said,  That will be the best method right there. Breitbart Texas previously reported how Sunshine was upset when  racist white people  infiltrated and disrupted one of her conference calls. She subsequently released the phone number of one of the infiltrators. The veteran immediately started receiving threatening calls.One of the #F***YoFlag movement supporters allegedly told a veteran who infiltrated their publicly posted conference call,  We are going to rape and gut your pregnant wife, and your f***ing piece of sh*t unborn creature will be hung from a tree. Breitbart Texas previously encountered Sunshine at a Sandra Bland protest at the Waller County Jail in Texas, where she said all white people should be killed. She told journalists and photographers,  You see this nappy-ass hair on my head?   That means I am one of those more militant Negroes.  She said she was at the protest because  these redneck mother-f**kers murdered Sandra Bland because she had nappy hair like me. #FYF911 black radicals say they will be holding the  imperial powers  that are actually responsible for the terrorist attacks on September 11th accountable on that day, as reported by Breitbart Texas. There are several websites and Twitter handles for the movement. Palmetto Star  describes himself as one of the head organizers. He said in a YouTube video that supporters will be burning their symbols of  the illusion of their superiority,  their  false white supremacy,  like the American flag, the British flag, police uniforms, and Ku Klux Klan hoods.Sierra McGrone or  Nocturnus Libertus  posted,  you too can help a young Afrikan clean their a** with the rag of oppression.  She posted two photos, one that appears to be herself, and a photo of a black man, wiping their naked butts with the American flag.For entire story: Breitbart News'\ninput ids: [101, 2053, 7615, 2003, 3517, 2013, 13857, 8112, 2372, 1997, 1996, 1001, 1042, 2100, 2546, 2683, 14526, 2030, 1001, 11865, 4801, 11253, 17802, 1998, 1001, 2304, 3669, 6961, 18900, 3334, 5750, 2170, 2005, 1996, 11404, 2075, 1998, 5689, 1997, 2317, 2111, 1998, 10558, 1012, 2027, 6628, 2500, 2006, 1037, 2557, 2265, 9857, 2305, 2000, 2735, 1996, 10401, 1998, 3102, 2317, 2111, 1998, 10558, 2000, 4604, 1037, 4471, 2055, 1996, 4288, 1997, 2304, 2111, 1999, 2637, 1012, 2028, 1997, 1996, 1042, 1008, 1008, 1008, 10930, 10258, 8490, 18829, 2003, 2170, 9609, 1012, 2016, 2038, 1037, 2557, 9927, 2265, 4354, 2013, 102]\nattention mask: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1142: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Define Model","metadata":{}},{"cell_type":"code","source":"# Define helper functions for encoding and constructing the dataset\ndef construct_encodings(x, tokenizer, max_len, trucation=True, padding=True):\n    return tokenizer(x, max_length=max_len, truncation=trucation, padding=padding)","metadata":{"execution":{"iopub.status.busy":"2024-10-19T00:20:38.733478Z","iopub.execute_input":"2024-10-19T00:20:38.733891Z","iopub.status.idle":"2024-10-19T00:20:38.739774Z","shell.execute_reply.started":"2024-10-19T00:20:38.733843Z","shell.execute_reply":"2024-10-19T00:20:38.738782Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"x = [str(item) for item in x]","metadata":{"execution":{"iopub.status.busy":"2024-10-19T00:20:38.741155Z","iopub.execute_input":"2024-10-19T00:20:38.741597Z","iopub.status.idle":"2024-10-19T00:20:38.764695Z","shell.execute_reply.started":"2024-10-19T00:20:38.741516Z","shell.execute_reply":"2024-10-19T00:20:38.764007Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"encodings = construct_encodings(x, tokenizer, max_len=MAX_LEN)","metadata":{"execution":{"iopub.status.busy":"2024-10-19T00:20:38.766352Z","iopub.execute_input":"2024-10-19T00:20:38.766728Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def construct_tfdataset(encodings, y=None):\n    if y:\n        return tf.data.Dataset.from_tensor_slices((dict(encodings),y))\n    else:\n        # this case is used when making predictions on unseen samples after training\n        return tf.data.Dataset.from_tensor_slices(dict(encodings))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create TensorFlow datasets\ntfdataset = construct_tfdataset(encodings,y)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Train and evaluate","metadata":{}},{"cell_type":"code","source":"TEST_SPLIT = 0.3\nBATCH_SIZE = 16 # Increased batch size for better GPU utilization\n\ntrain_size = int(len(x) * (1-TEST_SPLIT))\n\ntfdataset = tfdataset.shuffle(len(x))\ntfdataset_train = tfdataset.take(train_size)\ntfdataset_test = tfdataset.skip(train_size)\n\ntfdataset_train = tfdataset_train.batch(BATCH_SIZE)\ntfdataset_test = tfdataset_test.batch(BATCH_SIZE)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"N_EPOCHS = 10\n# Initialize model\nmodel = TFDistilBertForSequenceClassification.from_pretrained(MODEL_NAME)\n# Create optimizer using the transformers library for better compatibility\nlearning_rate = 1e-5\nnum_train_steps = len(tfdataset_train) * N_EPOCHS\nnum_warmup_steps = int(0.1 * num_train_steps)\n# Create the optimizer and learning rate scheduler\noptimizer, schedule = create_optimizer(\n    init_lr=learning_rate,\n    num_train_steps=num_train_steps,\n    num_warmup_steps=num_warmup_steps,\n    weight_decay_rate=0.01\n)\n\n# optimizer = Adam(\n#     learning_rate=1e-5,\n#     epsilon=1e-08,\n#     clipnorm=1.0  # Gradient clipping, often useful for transformers\n# )\n#optimizer = tf.keras.optimizers.Adam(learning_rate=1e-5)\n#loss = losses.SparseCategoricalCrossentropy(from_logits=True)\n\n# Compile model with the optimizer\nmodel.compile(optimizer=optimizer, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])\n\n#model.fit(tfdataset_train, batch_size=BATCH_SIZE, epochs=N_EPOCHS)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define callbacks\n# Train the model with early stopping\nearly_stopping = EarlyStopping(\n    monitor='val_loss',  # Monitor the validation loss\n    patience=3,  # Stop training if val_loss does not improve for 3 epochs\n    restore_best_weights=True  # Restore model weights from the best epoch\n)\n\n# Ensure the directory exists for saving the model\nos.makedirs('./model', exist_ok=True)\n\ncheckpoint = ModelCheckpoint(\n    filepath='./model/best_model.weights.h5',  # Save the best model weights to this file\n    monitor='val_loss',  # Monitor validation loss to determine the best model\n    save_best_only=True,  # Only save the model if the validation loss improves\n    save_weights_only=True,  # Only save the weights\n    verbose=1  # Print messages when saving the model\n)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Changes:** I changed nepochs from 3 to 10 and added early stopping and a model checkpoint.\n\n* Increased epochs (from 3 to 10) to allow the model more time to learn patterns and improve accuracy while avoiding underfitting.\n* Early stopping helps prevent overfitting by stopping the training process when validation performance stops improving, ensuring efficient training and restoring the best-performing model.\n* Model checkpointing saves the best version of the model during training, so you always have the optimal weights, even if training is interrupted or continues beyond the best epoch.\n\nTogether, these techniques help to optimize model performance by ensuring that the model learns efficiently and avoids both underfitting and overfitting.\n\n**I added this to see if there could be any improvements to the original model, but if you have any other ideas or thoughts on how we can improve it, feel free to share them anytime.**","metadata":{}},{"cell_type":"code","source":"# Train the model with the callbacks\nhistory = model.fit(\n    tfdataset_train,\n    validation_data=tfdataset_test,  # Provide validation data to monitor val_loss\n    #batch_size=BATCH_SIZE, explain: the datasets are already batched before being passed to the model.fit() method.no need to batch here\n    epochs=N_EPOCHS,\n    validation_freq=2,  # Evaluate on validation set every 2 epochs\n    callbacks=[early_stopping, checkpoint]  # Add the callbacks to the training\n)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"benchmarks = model.evaluate(tfdataset_test, return_dict=True, batch_size=BATCH_SIZE)\nprint(benchmarks)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def create_predictor(model, model_name, max_len):\n  tkzr = DistilBertTokenizer.from_pretrained(model_name)\n  def predict_proba(text):\n      x = [text]\n\n      encodings = construct_encodings(x, tkzr, max_len=max_len)\n      tfdataset = construct_tfdataset(encodings)\n      tfdataset = tfdataset.batch(1)\n\n      preds = model.predict(tfdataset).logits\n      preds = activations.softmax(tf.convert_to_tensor(preds)).numpy()\n      return preds[0][0]\n    \n  return predict_proba\n\nclf = create_predictor(model, MODEL_NAME, MAX_LEN)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**The code below is what I added since the original code didn’t include any visualization. I referred to the second reference code (BERT model) since it had a lot of visualizations. I’ve added things like the confusion matrix and classification report.**","metadata":{}},{"cell_type":"code","source":"# 1. Plot Training/Validation Loss and Accuracy\ndef plot_metrics(history):\n    plt.figure(figsize=(12, 5))\n    # Plot accuracy\n    plt.subplot(1, 2, 1)\n    plt.plot(history.history['accuracy'], label='Train Accuracy')\n    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.title('Training and Validation Accuracy')\n    plt.legend()\n\n    # Plot loss\n    plt.subplot(1, 2, 2)\n    plt.plot(history.history['loss'], label='Train Loss')\n    plt.plot(history.history['val_loss'], label='Validation Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.title('Training and Validation Loss')\n    plt.legend()\n\n    plt.show()\n\nplot_metrics(history)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 2. Evaluate and Generate Predictions\ny_pred_probs = model.predict(tfdataset_test).logits\ny_pred = tf.argmax(y_pred_probs, axis=1).numpy()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get true labels\ny_true = []\nfor _, labels in tfdataset_test.unbatch():\n    y_true.append(labels.numpy())\ny_true = tf.convert_to_tensor(y_true).numpy()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 3. Print Classification Report\nprint(\"Classification Report:\")\nprint(classification_report(y_true, y_pred))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 4. Plot Confusion Matrix\nconf_matrix = confusion_matrix(y_true, y_pred)\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.save_pretrained('./model/clf')\nwith open('./model/info.pkl', 'wb') as f:\n    pickle.dump((MODEL_NAME, MAX_LEN), f)","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}